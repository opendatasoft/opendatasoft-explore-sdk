# coding: utf-8

"""
    Opendatasoft's Explore API Reference Documentation

    # Introduction  Welcome to the Opendatasoft Explore API!  The Opendatasoft Explore API v2 is organized around REST. It provides access to all the data available through the platform in a coherent, hierarchical way.  If you want to learn more about how to make the most out of the API, we recommend reading the article [Introduction to API explore](https://userguide.opendatasoft.com/l/fr/article/b3dyxp1acz-une-introduction-l-api-explore). This article will provide you with a comprehensive overview of the API's capabilities and guide you through the process of accessing and manipulating data.  - Only the HTTP `GET` method is supported. - All API endpoints return JSON. - Endpoints are organized in a hierarchical way describing the relative   relationship between objects. - All responses contain a list of links allowing easy and relevant   navigation through the API endpoints. - All endpoints use the Opendatasoft Query Language (ODSQL). This means   that most of the time, parameters work the same way for all endpoints. - While the `records` endpoint is subject to a [limited number of returned records](https://help.opendatasoft.com/apis/ods-explore-v2/#tag/Dataset/operation/getRecords), the `exports` endpoint has no limitations.  ## Status  The v2.1 version is stable and production ready: no breaking change will be introduced in the future, following our [versioning policy](#section/Versioning).   ## v2.1 Changelog  Following our [versioning policy](#section/Versioning), some changes have been introduced in the 2.1 version of the Explore API. Some of them may not be backward compatible with the previous version:  - the `group_by` clause is now available [on export endpoints](#tag/Dataset/operation/exportRecords) - the XLSX export format replaces the old XLS format - full text searches have been reworked:   - the [search()](#section/ODSQL-predicates/search()) function has been changed,   - two new functions are available: [suggest()](#section/ODSQL-predicates/suggest()) and [startswith()](#section/ODSQL-predicates/startswith()) - date functions ([year()](#section/ODSQL-functions/year()), [month()](#section/ODSQL-functions/month()), [day()](#section/ODSQL-functions/day()), [hour()](#section/ODSQL-functions/hour()), [minute()](#section/ODSQL-functions/minute()), [second()](#section/ODSQL-functions/second())) now return integers, instead of strings - [grouping by geo fields](#section/Opendatasoft-Query-Language-(ODSQL)/Group-by-clause) is now deprecated and the `geo_cluster()` grouping function should be used instead - in a `group_by`, [null values are now grouped](#section/Opendatasoft-Query-Language-(ODSQL)/Language-elements) - [date aggregation keys are formatted as isoformat dates](#section/Opendatasoft-Query-Language-(ODSQL)/Group-by-clause), previously as timestamps - [CSV exports](#tag/Dataset/operation/exportRecordsCSV) output a Byte Marker Order (BOM) character by default - [GPX exports](#tag/Dataset/operation/exportRecordsGPX) use `<extension>` instead of `<desc>` by default to export attributes - datetimes in GeojSON exports are now output as isoformat strings, they were previously output as integer timestamps - geometry functions have been renamed (old function names are still available):   - `distance()` becomes [`within_distance()`](#section/ODSQL-predicates/within_distance())   - `geometry(geom1, geom2, INTERSECTS)` becomes [`intersects()`](#section/ODSQL-predicates/intersects())   - `geometry(geom1, geom2, DISJOINT)` becomes [`disjoint()`](#section/ODSQL-predicates/disjoint())   - `geometry(geom1, geom2, WITHIN)` becomes [`within()`](#section/ODSQL-predicates/within())  Regarding endpoints: - `/api/explore/v2.0/<source>/datasets/<dataset_id>/aggregates` and `/api/explore/v2.0/<source>/datasets/<dataset_id>/query` are not available anymore in v2.1. Their functionalities have been merged into the unique \"records\" endpoint (`/api/explore/v2.0/<source>/datasets/<dataset_id>/records`), - The output schemas of the following endpoints have been changed:   - [`/api/explore/v2.1/<source>/datasets`](#tag/Catalog/operation/getDatasets)   - [`/api/explore/v2.1/<source>/datasets/<dataset_id>`](#tag/Catalog/operation/getDataset)   - [`/api/explore/v2.1/<source>/datasets/<dataset_id>/records`](#tag/Dataset/operation/getRecords)   - [`/api/explore/v2.1/<source>/datasets/<dataset_id>/records/<record_id>`](#tag/Dataset/operation/getRecord)   ## Base URL  The Explore API is accessed using a base URL that is specific to a domain. In the examples provided in the documentation, we use the domain <http://documentation-resources.opendatasoft.com>.  URL paths start with `/api/explore/v2.1`. A path to a resource looks like this: `https://<domain>/api/explore/v2.1/<resource>`.  # Getting Started  To try out the Explore API, you'll get the first two records from a dataset that includes monthly prices for gold.  You'll get data from a portal providing public access to data. So, you don't need an account or an API key.  ## Step 1: Find dataset information  For this example, you will use the [GET records endpoint](#operation/getRecords) to list records from a dataset. So, you need the dataset identifier and the name of the field that stores the dates to build your request.  1. Open a browser and go to the desired domain:    `https://documentation-resources.opendatasoft.com/explore`.     The `explore` page lists all datasets on the domain.  2. Click the desired dataset.  For this example, click \"Gold Prices\".  3. Open the **Information** tab and check the **dataset identifier**.  In this example, the dataset identifier is `gold-prices`.  ## Step 2: Build your ODSQL query  In this example, you just want to retrieve the first set of two dataset records. The records returned by the request are grouped into pages. Pages are limited in size according to the number of records per page as specified by the `limit` parameter.  1. To determine how many records to retrieve, start the query with a `limit` parameter. Since you only want to retrieve the first two records, use `2` as the parameter value. 2. To determine the specific page of data to be returned, use an `offset` parameter. Since you only want to retrieve the first set of two records, use `0` as the parameter value or keep it unspecified, since `0` is the default value. 3. Put all the elements together.  The complete query is `limit=2&offset=0`.  ## Step 3: Build your request  To retrieve data using the Explore API, use the `GET` HTTP method.  The path to a resource is made up of the following elements:  - A domain: in this example, query the Explore API on the `documentation-resources.opendatasoft.com` domain. - A resource: from the domain's `catalog`, retrieve the `records` of the `gold-prices` dataset. - A query: use the `select=count(*)&group_by=year(date)` query built in the previous step.  The complete path is `https://documentation-resources.opendatasoft.com/api/explore/v2.1/catalog/datasets/gold-prices/records?limit=2`  You can access the Explore API using curl or any HTTP client.  To make a query using curl, open a terminal and paste the following command:  ```shell curl -X GET \"https://documentation-resources.opendatasoft.com/api/explore/v2.1/catalog/datasets/gold-prices/records?limit=2\" ```  The response should look like this:  ```json {   \"total_count\": 384,   \"results\": [     {       \"date\": \"1988-01\",       \"price\": 477.758     },     {       \"date\": \"1988-03\",       \"price\": 443.491     }   ] } ```  `total_count` shows the total number of records returned by the query.  The `results` array contains the two records returned by the request.  For example, we can see the first record contains two fields: `date` and `price`. Given the information from the first record, in January 1988 (`1988-01`), the gold price was $477.758 (`477.758`).  ## Next steps  Read the [Opendatasoft Query Language (ODSQL)](<#section/Opendatasoft-Query-Language-(ODSQL)>) reference documentation. It will help you build queries, search and filter data from Opendatasoft portals.  # Authentication  An authenticated user can be granted access to restricted datasets and benefit from extended quotas for API calls. The API features an authentication mechanism for users to be granted their specific authorizations.  For the platform to authenticate a user, you need to either:  - be logged in a portal, so a session cookie authenticating your user is   passed along your API calls, or - provide an API key via the Authorization header or as a query parameter.  ## Finding and generating API keys  API keys are managed via your user profile page at `https://<domain>/account/` or by clicking on your name in the header.  Go to the tab named My API keys to see your existing API keys, revoke them and create new ones.  **Note:** By default, every API key authenticates requests as coming from your user, which means they grant the same rights (yours) to any person using them. Therefore, you should not share your keys. For advanced usages, API key permissions can be edited using the API key Automation API.  ## Providing API keys within requests  If you try to access a private portal's catalog without being authenticated, the API returns a `401 Unauthorized` error.  After generating an API key, you can use it to make authenticated requests. Depending on the permissions granted to the user for which the API key has been created, the JSON response contains only data about the datasets this user can access on the portal.  It is good practice to pass the API key to the `Authorization` header in the following format:  `Authorization: Apikey <API_KEY>`  Alternatively, you can pass the API key as a query parameter in the following format:  `apikey=<API_KEY>`  Replace `<API_KEY>`with your API key.  **Note:** We recommend passing the API key via a header over in a query parameter because headers are not stored in your browser history or server logs, minimizing the risk of exposure of your API key.  ## Using OAuth2 authorization  Opendatasoft implements the OAuth2 authorization flow, allowing third-party application makers to access the data hosted on an Opendatasoft platform on behalf of a user while never having to deal with a password, avoiding any user credential being compromised.  The Opendatasoft OAuth2 authorization flow is compliant with RFC 6749 and uses Bearer Tokens in compliance with RFC 6750.  Application developers who want to use the Opendatasoft APIs with OAuth2 must go through the following steps:  1. Register their application with the Opendatasoft platform. 2. Request approval from users via an OAuth2 authorization grant. 3. Request a bearer token that will allow them to query the Opendatasoft    platform APIs for a limited amount of time. 4. Refresh the Bearer Token when it expires.  Currently, applications are registered on a specific domain and can only access data on this domain.  ### Register an application for OAuth2 authentication  1. Go to the My applications tab of your account page on the domain you want    to register the application on. 2. Fill the registration form with the following information:    - Application name: the name of the application    - Type:      - confidential: client password is kept secret from the user and only used from a trusted environment (e.g., a web service, where the client password is stored server-side and never sent to the user)      - public: client password is embedded in a client-side application, making it potentially available to the world (e.g., a mobile or desktop application)    - Redirection URL: the URL users will be redirected to after they have granted you permission to access their data 3. Store the resulting client ID and client secret that will be needed to    perform the next steps.  ### Getting an authorization grant  1. Redirect users to /oauth2/authorize/ with the appropriate query    parameters. 2. The user will then be authenticated in the platform and redirected to a    page identifying your application. 3. From there, the user will review the information you filled in the form    described above and the scope of the requested access and grant your    application the right to access their data. 4. Once the user has accepted those terms, they will be redirected to your    application's redirection URL with query parameters describing your    authorization grant.  The query parameters you need to supply when redirecting the user are the following:  - `client_id`: the client ID you were given during registration - `redirect_uri`: the redirect URI you provided during registration - `response_type`: this should always be set to code - `scopes` (optional): a list of space-separated requested scopes.   Currently, only `all` is supported. - `state` (optional): a random string of your choice  The state parameter is not mandatory, but providing one is recommended for security reasons to verify the returned value provided in the authorization grant redirect.  > Example of a call to `/oauth2/authorize/`:  ```http GET /oauth2/authorize/? client_id=123456789& redirect_uri=https://example.com& response_type=code& state=ilovedata& scope=all HTTP/1.1 ```  The authorization grant redirect will have these values:  - `code`: a 30-characters-long authorization code - `state`: the state passed in the request described above  The 30-character authorization code must now be converted into a bearer token within 1 hour before expiring.  Here is an example of redirection following a successful authorization:  ```http HTTP/1.0 302 FOUND  Location: https://example.com?state=ilovedata&code=gKnAQc2yIfdz2mY25xxgpTY2uyG5Sv  ```  ### Converting an authorization grant to a bearer token  To receive a bearer token, convert the previously obtained authorization grant via a POST request to `/oauth2/token/` with the following parameters:  - `client_id`: the client ID you were given during registration - `client_secret`: the client secret you were given during registration - `redirect_uri`: the redirect URI you provided during registration - `grant_type`: this should always be set to `authorization_code` - `code`: the 30-character authorization code received as an authorization   grant - `scopes` _(optional)_: a list of space-separated requested scopes.   Currently, only `all` is supported. - `state` _(optional)_: a random string of your choice  Example call to `/oauth2/token/`:  ```http POST /oauth2/token/ HTTP/1.1  client_id=cid& client_secret=csc& grant_type=authorization_code& code=GokshWxRFXmW0MaLHkDv5HrG6wieGs& scopes=all& redirect_uri=https://example.com& state=ilovedata ```  Alternative call with an `Authorization` header:  ```http POST /oauth2/token/ HTTP/1.1  Authorization: Basic Y2lkOmNzYw==  grant_type=authorization_code& code=GokshWxRFXmW0MaLHkDv5HrG6wieGs& scopes=all& redirect_uri=https://example.com&state=ilovedata ```  Alternatively, you can pass your client ID and client secret through the Authorization header  The response to this request is a JSON representation of a bearer token, which contains the following values:  - `access_token`: the token you can use to access the user's data. - `expires_in`: the number of seconds before token expiration - `token_type`: the type of the token. It will always be `Bearer` - `state`: the state passed in the request described above - `scope`: the list of scopes of this authorization code - `refresh_token`: a refresh token that can be used to renew this bearer   token when expired  > Unlike the access token, which can be used any number of times until > expiration, the refresh token doesn't expire but can only be used once.  Example response for a bearer token request:  ```http HTTP/1.0 200 OK  Content-Type: application/json ```  ```json {   \"access_token\": \"9kxoTUYvSxnAiMpv008NBqRiqk5xWt\",   \"expires_in\": 3600,   \"token_type\": \"Bearer\",   \"state\": \"ilovedata\",   \"scope\": \"all\",   \"refresh_token\": \"jFfDUcsK9zzNMs1zwczzJxGrimPtmf\" } ```  ### Using the bearer token  The bearer token can be passed along requests for authentication in three different ways:  - as a query parameter of the request  ```http GET /api/end/point?access_token=9kxoTUYvSxnAiMpv008NBqRiqk5xWt HTTP/1.1 ```  - in the request's `Authorization` header  ```http GET /api/end/point HTTP/1.1  Authorization: Bearer 9kxoTUYvSxnAiMpv008NBqRiqk5xWt ```  - in the request body  ```http GET /api/end/point HTTP/1.1  access_token=9kxoTUYvSxnAiMpv008NBqRiqk5xWt ```  ### Refreshing a bearer token  To refresh an expired bearer token, send a request to the `/oauth2/token/` endpoint, with the following query parameters:  - `client_id`: the client ID you were given during registration - `client_secret`: the client secret you were given during registration - `refresh_token`: the refresh token returned in the bearer token response - `grant_type`: this should always be set to `refresh_token` - `scopes`: a list of space-separated requested scopes. Currently, only   `all` is supported. - `state` _(optional)_: a random string of your choice  The response to this request is identical to the bearer token response.  Example token refresh call:  ```http POST /oauth2/token/ HTTP/1.1  client_id=cid& client_secret=csc& grant_type=refresh_token& refresh_token=jFfDUcsK9zzNMs1zwczzJxGrimPtmf& scopes=all& redirect_uri=https://example.com& state=ilovedata ```  # Opendatasoft Query Language (ODSQL)  Filtering features are built in the core of the Opendatasoft API engine.  The Opendatasoft Query Language (ODSQL) makes it possible to express complex queries as a filtering context for datasets or records and build aggregations or computed fields.  A given filtering context can simply be copied from one API to another. For example, it is possible to build a user interface that allows the user to visually select the records they are interested in, using full-text search, facets, and geo-filtering. Then, it allows them to download these records with the same filtering context.  The ODSQL is split into five different kinds of clauses:  - The [`select` clause](#section/Opendatasoft-Query-Language-(ODSQL)/Select-clause) allows choosing the returned fields, giving them an   alias, manipulating them with functions like count, sum, min, max, etc. - The [`where` clause](#section/Opendatasoft-Query-Language-(ODSQL)/Where-clause) acts as a filter for the returned datasets or records,   thanks to boolean operations, filter functions, arithmetic expressions, etc. - The [`group by` clause](#section/Opendatasoft-Query-Language-(ODSQL)/Group-by-clause) allows aggregating rows together based on fields,   numeric ranges, or dates. - The [`order by` and `limit` clauses](#section/Opendatasoft-Query-Language-(ODSQL)/Order-by-clause) allow choosing the order and quantity   of rows received as a response.  These clauses are used as parameters in the Explore API v2 for searching, aggregating, and exporting datasets and records. Depending on the used endpoint, some features of the query language are available or not in the request.  **Note:** the whole query language is case insensitive, and spaces are optional. In this documentation, the uppercase is used for language keywords, only for clarity purposes.  ## Language elements  ODSQL clauses are composed of basic language elements. These can either be [field names or aliases](#field-names), [literals](#literals-in-odsql-clauses) or [reserved keywords](#reserved-keywords-in-odsql-clauses).  ### Field names  A field name is made of alphanumeric characters and underscores and refers to a field of a dataset or to a dynamically created field that only exists during the query (a.k.a. an alias).  **Note:** if a field name contains only numbers or is a keyword, it must be enclosed in back quotes.  > Examples of a field names:  ```sql my_field > 10  -- my_field is a field name  `12` > 10  -- without back quotes, 12 would be considered a numeric literal  `and`: \"value\" -- AND is a keyword, `and` represents a field name then ```  ### Literals in ODSQL clauses  Literals are fixed values of a specific type and can be used in comparison, assignments, or functions.  There are 6 types of literal:  - string - numeric - date - boolean - geometry - null  #### String literal  A string literal is a literal enclosed in either single or double quotes.  > Examples of a string literal:  ```sql \"Word\"  \"Multiple words\"  'Using single quotes' ```  **Note:** `\\` (backslash) character can be used to escape special characters. For example to escape a single quote: `'Don\\'t worry'`.  #### Numeric literal  A numeric literal is either an integer or a decimal value. It is not enclosed in quotes.  > Examples of numeric literals:  ```sql 100  5.8  my_field > 108.7 ```  #### Date literal  A date literal is defined with a `date` keyword followed by a valid date format enclosed in single quotes.  A valid date can be:  - an [ISO 8601 date](https://en.wikipedia.org/wiki/ISO_8601), or - a slash-separated date in the YYYY/MM/DD (year/month/day) format.  > Examples of a date literal:  ```sql date'2017-04-03T08:02'  date'2018/04/01' ```  #### Boolean literal  A boolean literal can either be a `TRUE` or a `FALSE` keyword (case insensitive). It should be used in boolean filters.  > Example of a boolean literal:  ```sql my_boolean_field is TRUE  my_boolean_field: FALSE ```  #### Geometry literal  A geometry literal is defined with a `geom` keyword followed by a valid geometry expression enclosed in single quotes.  Supported geometry expressions are:  - [WKT/WKB](https://en.wikipedia.org/wiki/Well-known_text) - [GeoJSON geometry](https://en.wikipedia.org/wiki/GeoJSON)  > Example of a geometry literal:  ```sql within_distance(my_geo_field, geom'POINT(1 1)', 10km)  geometry(my_geo_field, geom'{\"type\": \"Polygon\",\"coordinates\":[[[100.0, 0.0],[101.0, 0.0],[101.0, 1.0],[100.0, 1.0],[100.0,0.0]]]}') ``` #### Null literal  The `null` literal (case insensitive) is used to represent the absence of a value.  It is present in the [is null filter](#section/ODSQL-predicates/IS-NULL-filter) to test whether a field has a value or not.  ### Reserved keywords in ODSQL clauses  Reserved keywords can be used inside clauses for building ODSQL expressions.  When used in a clause as a field literal, the reserved keyword must be escaped with back quotes.  List of reserved keywords:  - and - as - asc - avg - by - count - date_format - day - dayofweek - desc - distinct - equi - false - group - hour - ifnull - or - limit - lower - max - millisecond - min - minute - month - not - null - quarter - range - search - second - select - sum - top - true - upper - where - year  For example, `not` is a reserved keyword and must be escaped with back quotes if referred to as a field literal:  ```sql my_field_literal is not true -- my_field_literal is not a reserved keyword, there's no need to escape it  `not` is not true -- not is a reserved keyword and must be escaped ```  ### Handling null values  A `null` value in a dataset is used when the value in a field is unknown or missing. It means that there is no data for a field in a record.  Each clause behaves differently to handle null values:  - When selecting a field in a `select` clause, null values are represented as `null`. - When filtering with a `where` clause, a comparison involving at least one null value is false, meaning that null values are filtered out of the result. - When grouping with a `group_by` clause, no group exists for null values in v2.0, a null group do exist starting with v2.1 - When sorting with an `order_by` clause, null values come after all other values, regardless of the sorting direction (i.e., ascending or descending).  Default handling of null values can be changed by filtering using the [is null filter](#section/ODSQL-predicates/IS-NULL-filter) or replacing null values by an alternative value or expression using the `ifnull` function.   ## Select clause  The select clause can be used in records Explore APIs as the parameter `select`.  The select clause allows:  - choosing the fields that will be returned for each row, - transforming fields using arithmetic, - renaming fields, - adding computed virtual fields to fields, and - including or excluding fields based on a pattern.  A select clause is composed of a single select expression or a list of comma-separated expressions.  A select expression can be:  - a field literal, - an include/exclude function, - an arithmetic expression, or - an aggregation function.  Except for the include/exclude function, a select expression can define a label with the keyword `AS`. This label will be used in the output of the API as `key` for the select expression result.  ### Select field names  A select field name is the simplest form of select expression. It takes a field name that must be returned in the result. It also accepts the special character `*` to select all fields (it is the default behavior).  If a select expression is used in conjunction with a `group by` clause, the selected field name must be in the `group by` clause.  > Examples of a select field literal:  ```sql *                           -- Select all fields  field1, field2, field3      -- Only select field1, field2, and field3  field1 AS my_field, field2  -- Renaming field1 as my_field and select field2 ```   ### Select aggregation  Like in the SQL language, a `select` can also express an aggregation expression.  The following aggregation functions are available:  - [avg (average)](#section/ODSQL-aggregate-functions/avg()) - [count](#section/ODSQL-aggregate-functions/count()) - [count distinct](#section/ODSQL-aggregate-functions/count(distinct)) - [envelope](#section/ODSQL-aggregate-functions/envelope()) - [max (maximum)](#section/ODSQL-aggregate-functions/max()) - [median](#section/ODSQL-aggregate-functions/median()) - [min (minimum)](#section/ODSQL-aggregate-functions/min()) - [percentile](#section/ODSQL-aggregate-functions/percentile()) - [sum](#section/ODSQL-aggregate-functions/sum())  > Examples of an aggregation expression:  ```sql SUM(population) as sum_population -- Will compute the sum of all values for the field `population` returned as sum_population  COUNT(*) -- Return number of elements ```  ## Where clause  The where clause can be used in the whole Explore API as the parameter `where`.  The where clause allows one to filter rows with a combination of boolean expressions.  A where expression can be:  - a search query - a filter function - a comparison filter - an equality filter  Where expressions can be combined with [boolean operators](#boolean-operators) and grouped via parenthesis.  > Example of a where clause with boolean operators: ```sql my_numeric_field > 10 and my_text_field like \"paris\" or within_distance(my_geo_field, geom'POINT(1 1)', 1km) ``` > This where clause filters results where numeric_field > 10 and (my_text_field contains the word `paris` or distance between my_geo_field and the point with 1,1 as lat,lon is under 1 kilometer)  **Note**: it is generally possible to use multiple `where` clauses on an API endpoint. They are combined with a boolean `AND` in that case.  ### Boolean operators  Where expressions can use boolean operators to express boolean filter.  There are 3 different boolean operations:  - `AND`: results must match left and right expressions - `OR`: results must match left or right expression - `NOT`: inverses the next expression  `AND` has precedence over the `OR` operator. It means that, in the expression `a or b and c`, the sub-expression `b and c` is interpreted and executed first. It can also be written with parenthesis: `a or (b and c)`.  In order to change operator precedence, it is possible to use parenthesis in the expression. To give precedence to the `OR` operator, the above expression can be written `(a or b) and c`.  > Examples of a boolean operator:  ```sql my_boolean_field OR my_numeric_field > 50 and my_date_field > date'1972' -- Results can have my_boolean_field to true. They can also have my_numeric_field greater than 50 and my_date_field older than 1972  (my_boolean_field OR my_numeric_field > 50) and my_date_field > date'1972' -- Results must have my_date_field older than 1972. They also must have my_boolean_field to true or my_numeric_field greater than 50 ```  ### Search query filter  Filter search queries are queries that don’t refer to fields. They only contain quoted strings and boolean operators. Filter search queries perform full-text searches on all visible fields of each record and return matching rows.  If the string contains more than one word, the query will be an `AND` query on each tokenized word.  > Examples of a search query:  ```sql \"tree\"  \"tree\" AND \"flower\"  \"tree\" OR \"car\"  NOT \"dog\"  \"dog\" AND NOT \"cat\" ```  > Examples of a search query with multiple words:  ```sql \"film\"           -- returns results that contain film  \"action movies\"  -- returns results that contain action and movies. ```  ### Filter functions  Filter functions are built-in functions that can be used in a `where` clause.  Available filter functions are:  - [`search` function](#section/ODSQL-predicates/search()), to perform a full-text search - [`suggest` function](#section/ODSQL-predicates/suggest()) - [`startswith` function](#section/ODSQL-predicates/startswith()) - [`in_bbox` function](#section/ODSQL-predicates/in_bbox()), to filter in a geographical area defined by a bounding box - [`within_distance` function](#section/ODSQL-predicates/within_distance()), to filter in a geographical area defined by a circle - [`intersects`](#section/ODSQL-predicates/intersects()), [`disjoint`](#section/ODSQL-predicates/disjoint()) and [`within`](#section/ODSQL-predicates/within()) to filter in a geographical area defined by a geometry  ### Comparison operators  Three types of comparison operators can be used in a `where` clause:  - [text comparison operators](#section/ODSQL-predicates/Text-comparison-operators) - [numeric comparison operators](#section/ODSQL-predicates/Numeric-comparison-operators) - [date comparison operators](#section/ODSQL-predicates/Date-comparison-operators)  ## Group by clause  The group by clause can be used in the Explore API as the parameter `group_by`.  The group by clause creates groups from data depending on a group by expression. Groups of data cannot be returned directly and aggregation functions in the `select` clause have to be used to \"summarize\" and return a value for each group. An operation of \"aggregation\" can then be described by two parts: the `group_by` part that make groups of rows of data from a specific criterion and an aggregation function in the `select` clause to reduce each group to a row.  A group by clause can contain:  - a single group by expression, or - a list of comma-separated group by expressions.  Like select expressions, a group by expression can have an `AS` statement to give it a label.  A group by expression can be:  - empty, - a field, - [static ranges](#section/ODSQL-grouping-functions/range()-group-by-static-ranges), - [ranges of equal widths](#section/ODSQL-grouping-functions/range()-group-by-ranges-of-equal-widths), - the result of a function applied on a field value (e.g. a date function, or a date format)  > Example of a simple group by expression with a label:  ```sql group_by=my_field as myfield ```  > Example of multiple group by expressions with a label:  ```sql group_by=my_field1,my_field2 as my_field ```  ### Empty group by  When no `group_by` part is expressed, rows of data are implicitly grouped into an sole group and aggregation functions are computed on the whole set of records.  ### Group by field  A group by field expression allows the grouping of specified field values. It creates a group for each different field value.  **Format:** `group_by=<field_literal>`  > Example of a simple group by field expression  ```sql group_by=my_field ```  **Note:** - Starting with v2.1, grouping by geopoint or geoshape fields is not supported directly anymore. Please use the [geo_cluster() grouping function](#section/ODSQL-grouping-functions/geo_cluster()) to make groups out of geo points. - Starting with v2.1, grouping by a date field now formats the key of each group as a string representing the ISO formatting of the date, when it was an integer timestamp in v2.0  ## Order by clause  The order by clause can be used to sort rows returned by a query.  The parameter `order_by` adds an order by clause to an API query. It accepts a list of comma-separated expressions followed by a direction:  - ASC for ascending - DESC for descending  **Format:** `order_by = expression [ ASC | DESC ], ...`  An order by expression can be:  - a field - an aggregation function - [a `random` function](#section/ODSQL-functions/random())  The direction, if not specified, is ASC (ascending) by default. The random sorting will circumvent the default direction.  **Note:** when ordering by both aggregations and fields, the aggregation order must be at the head of the list. For example, `order_by = avg(age), gender works`, but `order_by = gender, avg(age)` returns an error.  > Examples of an order by clause  ```sql group_by=city & order_by=city ASC -- Order cities alphabetically  group_by=city & order_by=count(*) DESC -- Order each city by its number of records  select=count(*) as population_count & group_by=city  & order_by=population_count DESC -- Order each city by its number of records, using a label  group_by=city, year(birth_date) as birth_year & order_by=city DESC, birth_year ASC -- Order by city and then by year of birth ```  # ODSQL functions  ## length()  **Syntax:** `length(<text_literal>|<text_field>)`  **Returned type:** `integer`  **Clauses where it can be used:** `select`, `where`, `order_by`  Returns the string length of its parameter, i.e. the number of characters that composes the string.  ## now()  **Syntax:** `now(<optional_named_parameters>)`  **Returned type:** `datetime`  **Clauses where it can be used:** `select`, `where`, `order_by`  ### Parameters to the now() function  > Examples, assuming the current date time is 2021-05-06 12:34:55.450500+00:00, which is a Thursday ```sql now() -- Returns '2021-05-06T12:34:55.450500+00:00' now(year=2000) -- Sets the year component to return '2000-05-06T12:34:55.450500+00:00' now(years=-1) -- Sets the year to one year ago which is '2020-05-06T12:34:55.450500+00:00' now(year=2001, months=-1) -- Sets the year to 2001 and subtract 1 month to return '2000-04-06T12:34:55.450500+00:00' now(day=31,month=2) -- Sets the day to 31, then the month to 2. The actual day part is rounded to 28 '2021-02-28T12:34:55.450500+00:00' now(weekday=0) -- Sets the day to the next Monday which is '2021-05-10T12:34:55.450500+00:00' now(mondays=+1) -- Sets the day to the next Monday which is also '2021-05-10T12:34:55.450500+00:00' now(mondays=-1) -- Sets the day to the previous Monday which is '2021-05-03T12:34:55.450500+00:00' ```  Without any parameters, the `now()` function returns the current date and time.  The function may also be called with named parameters to set or modify certain parts of the current date and time.  With each parameter, an integer value is required, interpreted as an absolute value or as a relative value to a part of the current date and time.  Parameter names in their singular form will set a certain part of the current date and time to the given value. Parameter names written in plural will add or subtract the given value to a part of the current date and time.  If a parameter is used multiple times in the call, only the last one is actually used, the others are ignored.  | Parameter name | Accepted values      | Description                                                                                               | | -------------- | -------------------- | --------------------------------------------------------------------------------------------------------- | | `year`         | 1 to 9999            | Year component                                                                                            | | `years`        | Any integer          | Value to add to or subtract from the year component                                                       | | `month`        | 1 to 12              | Month component                                                                                           | | `months`       | Any integer          | Value to add to or subtract from the month component, then the year component in case of overflow         | | `day`          | Any positive integer | Day component, rounded to the maximum valid day number for the current month                              | | `days`         | Any integer          | Value to add to or subtract from the day component, then the month component in case of overflow          | | `hour`         | 0 to 23              | Hour component                                                                                            | | `hours`        | Any integer          | Value to add to or subtract from the hour component, then the day component in case of overflow           | | `minute`       | 0 to 59              | Minute component                                                                                          | | `minutes`      | Any integer          | Value to add to or subtract from the minute component, then the hour component in case of overflow        | | `second`       | 0 to 59              | Second component                                                                                          | | `seconds`      | Any integer          | Value to add to or subtract from the second component, then the minute component in case of overflow      | | `microsecond`  | 0 to 999999          | Microsecond component                                                                                     | | `microseconds` | Any integer          | Value to add to or subtract from the microsecond component, then the second component in case of overflow | | `weekday`      | 0 to 6               | Day of the week, 0 for monday to 6 for sunday                                                             | | `mondays`      | Any integer          | Number of Mondays to add to or subtract from the current date                                             | | `tuesdays`     | Any integer          | Number of Tuesdays to add to or subtract from the current date                                            | | `wednesdays`   | Any integer          | Number of Wednesdays to add to or subtract from the current date                                          | | `thursdays`    | Any integer          | Number of Thursdays to add to or subtract from the current date                                           | | `fridays`      | Any integer          | Number of Fridays to add to or subtract from the current date                                             | | `saturdays`    | Any integer          | Number of Saturdays to add to or subtract from the current date                                           | | `sundays`      | Any integer          | Number of Sundays to add to or subtract from the current date                                             |  ## year()  **Syntax:** `year(<date_literal>|<date_field>|<datetime_literal>|<datetime_field>)`  **Returned type:** `integer`  **Clauses where it can be used:** `select`, `where`, `order_by`, `group_by`  Returns the year number of a date or datetime as a string.  ## month()  **Syntax:** `month(<date_literal>|<date_field>|<datetime_literal>|<datetime_field>)`  **Returned type:** `integer`  **Clauses where it can be used:** `select`, `where`, `order_by`, `group_by`  Returns the month number (between 1 and 12) of a date or datetime as a string.  ## day()  **Syntax:** `day(<date_literal>|<date_field>|<datetime_literal>|<datetime_field>)`  **Returned type:** `integer`  **Clauses where it can be used:** `select`, `where`, `order_by`, `group_by`  Returns the day number of the month (between 1 and 31) of a date or datetime as a string.  ## hour()  **Syntax:** `hour(<date_literal>|<date_field>|<datetime_literal>|<datetime_field>)`  **Returned type:** `integer`  **Clauses where it can be used:** `select`, `where`, `order_by`, `group_by`  Returns the hour number (between 0 and 23) of a date or datetime as a string.  ## minute()  **Syntax:** `minute(<date_literal>|<date_field>|<datetime_literal>|<datetime_field>)`  **Returned type:** `integer`  **Clauses where it can be used:** `select`, `where`, `order_by`, `group_by`  Returns the minute number (between 0 and 59) of a date or datetime as a string.  ## second()  **Syntax:** `second(<date_literal>|<date_field>|<datetime_literal>|<datetime_field>)`  **Returned type:** `integer`  **Clauses where it can be used:** `select`, `where`, `order_by`, `group_by`  Returns the second number (between 0 and 59) of a date or datetime as a string.  ## date_format()  **Syntax:** `date_format(<date>, <date_format>)`  **Arguments:**  - `<date>`: a date field, - `<date_format>`: a string describing how to format the date (see below)  **Returned type:** `string`.  **Clauses where it can be used:** `select`, `where`, `order_by`, `group_by`   `<date_format>` is a string, where each character or group of characters will be replaced by parts of the date in the returned string.  The following formats are available for a date format expression:  | Symbol       | Description                                            | Examples | | ------------ | ------------------------------------------------------ | -------- | | yy or YY     | year on two digits                                     | 20       | | yyyy or YYYY | year on four digits                                    | 2020     | | xx           | weekyear\\* on two digits                               | 96       | | xxxx         | weekyear\\* on four digits                              | 1996     | | w            | week of weekyear                                       | 7        | | ww           | week of weekyear, left-padded with 0                   | 07       | | e            | day of week, as a number, 1 for Monday to 7 for Sunday | 2        | | E            | day of week, abbreviated name                          | sun.     | | EEEE         | day of week, full name                                 | Sunday   | | D            | day of year                                            | 89       | | DDD          | day of year, left-padded with 0                        | 089      | | M            | month of year                                          | 7        | | MM           | month of year, left-padded with 0                      | 07       | | MMMM        | month of year, full name                               | July     | | d            | day of month                                           | 8        | | dd           | day of month, left-padded with 0                       | 08       | | H            | hour of day, 0-23                                      | 9        | | HH           | hour of day, 00-23, left-padded with 0                 | 09       | | m            | minute of hour, 0-59                                   | 13       | | mm           | minute of hour, 00-59, left-padded with 0              | 09       | | s            | second of minute, 0-59                                 | 13       | | ss           | second of minute, 00-59, left-padded with 0            | 09       |  \\*Years and week years differ slightly. For more information, see the [definition](https://en.wikipedia.org/wiki/ISO_week_date) of week years.  The date format can contain free text that won't be interpreted. The free text must be surrounded by single quotes '.  To insert a single quote in the final string, it must be doubled.  Some special characters can also be used as delimiters between date components: `?`, `,`, `.`, `:`, `/` and `-`.  > Examples of a `date_format` function, where `date_field` = '2007-11-20T01:23:45':  ```sql date_format(date_field, 'dd/MM/YYYY') -- Returns '20/11/2007'  date_format(date_field, \"'The date is 'dd/MM/YYYY\") -- Returns 'The date is 20/11/2007'  date_format(date_field, \"'The date is '_'_'dd/MM/YYYY''\") -- Returns \"The date is '20/11/2007'\"  date_format(date_field, 'E') -- Returns 'mar.'  date_format(date_field, 'EEEE') -- Returns 'mardi'  date_format(date_field, 'H') -- Returns '1'  date_format(date_field, 'HH') -- Returns '01'  date_format(date_field, 'yy') -- Returns '07'  date_format(date_field, 'yyyy') -- Returns '2007'  date_format(date_field, 'M') -- Returns '11'  date_format(date_field, 'MM') -- Returns '11' ```  When used in the `where` clause, `date_format` must be compared to string values.  > Example of a `date_format` function used in a `where` clause:  ```sql where=date_format(date_field, 'dd') = '08' ```  You can use the `lang` parameter to force the output language.  ## json_format()  **Syntax:** `json_format(<text_field>,[<fallback>[<null>|<text_literal>]])`  **Returned type:** `text` or `json`  **Clause where it can be used:** `select`  **Description:**  Formats the text field into JSON if possible. If the text can be transformed into valid JSON, it returns the formatted JSON string. If the text cannot be transformed into valid JSON, it returns either the fallback value if provided or the original string.  - `<text_field>` (mandatory): A text field to be formatted into JSON. It cannot be multivalued.  - `<fallback>` (optional): A fallback string to return if the text cannot be transformed into valid JSON. If omitted, the original string is returned in case of invalid JSON.  **Note**: On `/exports`, except with the JSON export format, this function returns the original text value.  > Example of a `json_format` function used in a `select` clause:  ```sql select=json_format(text_field)  select=json_format(text_field, 'bad json')  select=json_format(text_field, null) ```  ## ifnull()  **Syntax:** `ifnull(<expression>, <alternative_expression>)`  **Arguments:**  - `<expression>`: a field or an expression - `<alternative_expression>`: an alternative field, expression or literal  **Clauses where it can be used:** `select`, `where`, `order_by`, `group_by`  **Returned type:** the type of `<expression>` when not null  **Returned value:** the result of `<alternative_expression>` if `<expression>` returns a null value. The result of `<expression>` otherwise.  The returned type of `<expression>` and `<alternative_expression>` should be the same.  For `group_by` clause, expressions are restricted to fields and literals.  > Examples of `ifnull` function, where `int_field` contains some null values:  ```sql ifnull(int_field, 0) -- value of int_field is 0 for each row that contains a null value ```  ## lower()  **Syntax:** `lower(<text_literal>|<text_field>)`  **Returned type:** `string`  **Clauses where it can be used:** `select`, `where`, `order_by` and `group_by`  Returns a string in lowercase.  > Some examples: ```sql lower('JAZZ') -- returns 'jazz'  lower(text_field) -- returns the lowercase representation of the field ```  ## include() and exclude()  **Syntax:** `include(<field_name_pattern>)`  **Syntax:** `exclude(<field_name_pattern>)`  **Clauses where it can be used:** `select` only  Include and exclude are functions that accept fields names.  Fields listed in an include function are present in the result, whereas fields listed in an exclude function are absent from the result.  Fields can contain a wildcard suffix (the `*` character). In that case, the inclusion/exclusion works on all field names beginning with the value preceding the wildcard.  **Note**: `include()` and `exclude()` are pseudo functions: they do not return a value, but are used as a declaration to constrain the list of returned fields.  > Examples of an include/exclude:  ```sql include(pop) -- will only include fields which name is pop  exclude(pop) -- will exclude fields which name is pop  include(pop*) -- Will include fields beginning with pop ```  ## Arithmetic operators  An arithmetic expression accepts simple arithmetic operations. It accepts field names, numeric constants or text values, and scalar functions. More complex arithmetic expressions can be formed by connecting these elements with arithmetic operators:  - `+`: add - `-`: subtract - `*`: multiply - `/`: divide  **Note:** A division by zero returns a null value.  Arithmetic operators are only defined on numeric values.  > Examples of arithmetic expressions:  ```sql 2 * population -- the value of the field `population` doubled  \"hello\" -- the constant string \"hello\"  length(country_name) -- the string length of the field `country_name` ```  ## random()  **Syntax:** `random ( <integer> )`  **Clauses where it can be used:** `order_by` only  The `<integer>` is the seed of the random function. When using the random function with one same seed, it will return the same random order each time.  > Examples of an order by random  ```sql group_by=city & order_by=random(1) -- Order cities randomly  group_by=city & order_by=random(1) -- Order cities randomly in the exact same order as the first example  group_by=city & order_by=random(2) -- Order cities randomly in a different order than the first example ```  ## distance()  **Syntax:** `distance(<geo_field>, <center_geometry>)`  **Clauses where it can be used:** `select`, `order_by`  **Returned type:** numeric  > Examples of a `distance` function:  ```sql distance(field_name, GEOM'<geometry>') ```  The `distance` function computes arc distance between geo_point field and a point geometry as reference. Distance (in m) can be returned using `select` and/or used to sort records.  # ODSQL predicates  Predicates are functions that return a boolean value (`true` or `false`). They can be used to filter results in the `where` clause.  ## search()  **Syntax:** `search(<text_field>|*, <text_literal>)` where: - first parameters are the set of fields on which the search is done:   - `*` or empty to search on all visible fields   - a subset of field names separated with a comma `,` - the string to search for as last parameter  **Clauses where it can be used:** `where` only  **Returned type:** boolean  The `search()` function performs a full-text query on all selected fields of each record and return matching records.  It is a fuzzy search and a prefix search: `<test_literal>` is first split into terms separated by a space, the first terms are searched for with a certain level of fuziness (see below), and the last term is a prefix search. The level of fuziness for each term depends on the length of the term: - for terms with a length > 5, it matches strings with a [Levenshtein distance](https://en.wikipedia.org/wiki/Levenshtein_distance) of 2, - for terms with a length > 2, it matches strings with a [Levenshtein distance](https://en.wikipedia.org/wiki/Levenshtein_distance) of 1  The matching is **case insensitive**.  > Examples of a `search` function:  ```sql search(title, \"bok of secret\")  -- will match \"THE BOOK OF SECRETS\" ```   ## suggest()  **Syntax:** `suggest(<text_field>|*, <text_literal>)` where: - first parameters are the set of fields on which the search is done:   - `*` or empty to search on all visible fields   - a subset of field names separated with a comma `,` - the string to search for as last parameter  **Clauses where it can be used:** `where` only  **Returned type:** boolean  > Examples of a `suggest` function:  ```sql suggest(*, \"film\")  -- returns results that contain film, films, filmography, etc. in at least one visible field suggest(\"film\")  -- equivalent to the above query search(title, \"secret\")  -- will match \"THE BOOK OF SECRETS\"  suggest(text_field, other_text_field, \"film\")  -- same search but in text_field or other_text_field suggest(text_field, \"film\") OR suggest(other_text_field, \"film\") -- equivalent to the above query  suggest(text_field, \"film\") AND suggest(other_text_field, \"film\") -- returns results that contain film, films, filmography, etc. in both fields ```  The `suggest()` function performs a full-text query on all selected fields of each record and return matching records. It is a prefix search: it matches the text fields that contain terms **beginning with** the searched string.  The matching is **case insensitive**.  **Note:** this function may miss some results that match the prefix when it is used with small prefixes.   ## startswith()  **Syntax:** `startswith(<text_field>|*, <text_literal>)` where: - first parameters are the set of fields on which the search is done:   - `*` or empty to search on all visible fields   - a subset of field names separated with a comma `,` - the string to search for as last parameter  **Clauses where it can be used:** `where` only  **Returned type:** boolean  > Examples of a `startswith` function:  ```sql startswith(id, \"ID4536\")  -- will match id that start with \"ID4536\" startswith(title, \"SECRET\")  -- will match \"SECRET DEFENSE\" but not \"THE BOOK OF SECRETS\", nor \"book of secret\" ```  The `startswith()` function performs a text query on all selected fields of each record and return matching records. It is a prefix search: it matches the text fields that contain **strings** **beginning with** the searched string. Contrary to the `suggest()` function, the comparison is made on the whole string, without splitting it by spaces and forming **terms** before.  The matching is **case sensitive**.   ## within_distance()  **Syntax:** `within_distance(<geo_field>, <center_geometry>, <distance><unit>)`  **Clauses where it can be used:** `where` only  **Returned type:** boolean  > Examples of a `within_distance` function:  ```sql within_distance(field_name, GEOM'<geometry>', 1km)  within_distance(field_name, GEOM'<geometry>', 100yd) ```  The `within_distance` function limits the result set to a geographical area defined by a circle. This circle must be defined by its center and a distance.  - The center of the circle is expressed as a [geometry literal](#section/Opendatasoft-Query-Language-(ODSQL)/Language-elements). - The distance is numeric and can have a unit in:    - miles (mi)   - yards (yd)   - feet (ft)   - meters (m)   - centimeters (cm)   - kilometers (km)   - millimeters (mm)  ## in_bbox()  **Syntax:** `in_bbox(<geo_field>, lat1, lon1, lat2, lon2)`  **Clauses where it can be used:** `where` only  **Returned type:** boolean  This function limits the results to records that have their `<geo_field>` contained in a given bounding box. The bounding box is expressed by giving its two extreme points: (lat1, lon1) for the latitude and longitude of the first point and (lat2, lon2) for the latitude and longitude of the second point.  ## intersects()  **Syntax:** `intersects(<geo_field>, <geometry_literal>)`  **Clauses where it can be used:** `where` only  **Returned type:** boolean  > Examples of a `geometry` function:  ```sql intersects(geo_shape, geom'POLYGON((2.331161 48.869762, 2.3600006 48.87574, 2.373046875 48.85101, 2.3503875 48.84209, 2.3376846 48.85451, 2.3311614 48.869762))') ```  The `intersects` function limits the result set to a geographical area that intersects a given geometry.  This function must be defined with a [geometry literal](#section/Opendatasoft-Query-Language-(ODSQL)/Language-elements).  ## disjoint()  **Syntax:** `disjoint(<geo_field>, <geometry_literal>)`  **Clauses where it can be used:** `where` only  **Returned type:** boolean  > Examples of a `geometry` function:  ```sql disjoint(geo_shape, geom'POLYGON((2.331161 48.869762, 2.3600006 48.87574, 2.373046875 48.85101, 2.3503875 48.84209, 2.3376846 48.85451, 2.3311614 48.869762))') ```  The `disjoint` function limits the result set to a geographical area that is disjoint from a given geometry.  This function must be defined with a [geometry literal](#section/Opendatasoft-Query-Language-(ODSQL)/Language-elements).  ## within()  **Syntax:** `within(<geo_field>, <geometry_literal>)`  **Clauses where it can be used:** `where` only  **Returned type:** boolean  > Examples of a `within` function:  ```sql within(geo_shape, geom'POLYGON((2.331161 48.869762, 2.3600006 48.87574, 2.373046875 48.85101, 2.3503875 48.84209, 2.3376846 48.85451, 2.3311614 48.869762))') ```  The `within` function limits the result set to a geographical area that lie within a given geometry.  This function must be defined with a [geometry literal](#section/Opendatasoft-Query-Language-(ODSQL)/Language-elements).   ## Text comparison operators  **Clauses where it can be used:** `where` only  | <div style=\"width:110px\">Operator</div> | Description                                                                      | | --------------------------------------- | -------------------------------------------------------------------------------- | | `=`                                     | Perform an exact query (not tokenized and not normalized) on the specified field |  ## Numeric comparison operators  **Clauses where it can be used:** `where` only  | <div style=\"width:110px\">Operator</div> | Description                                                                                                 | | --------------------------------------- | ----------------------------------------------------------------------------------------------------------- | | `=`                                     | Match a numeric value                                                                                       | | `>`,`<`,`>=`,`<=`                       | Return results whose field values are larger, smaller, larger or equal, smaller or equal to the given value |  ## Date comparison operators  **Clauses where it can be used:** `where` only  | <div style=\"width:110px\">Operator</div> | Description                                                         | | --------------------------------------- | ------------------------------------------------------------------- | | `=`                                     | Match a date                                                        | | `>`,`<`,`>=`,`<=`                       | Return results whose field date are after or before the given value |  ## Boolean field filter  **Syntax:**  - `<boolean_field>` - `<boolean_field> is (true|false)`  **Clauses where it can be used:** `where` only  A boolean field filter takes a boolean field and restricts results only if the boolean value is `true`.  There are 2 ways of creating a filter expression:  - with a field literal only: in that case, it filters the result where the field literal value is `true` - with a field literal followed by the `is` keyword, then `true` or `false` keywords  > Examples of a boolean field filter:  ```sql my_boolean_field          -- Filters results where boolean_field is true  my_boolean_field is false -- Filters results where boolean_field is false ```  where `<field_literal>` must be a valid boolean field  ## IN filter  **Syntax:**  - on a numeric range: `<field_literal> IN (]|[)<numeric_literal> (TO|..) <numeric_literal>(]|[)` - on a date range: `<field_literal> IN (]|[)<date_literal> (TO|..) <date_literal>(]|[)` - on a list: `<field_literal> IN (<literal>, <literal>*)` - on a multivalued field: `<literal> IN <field_literal>`  **Clauses where it can be used:** `where` only  An `IN` filter restricts results using a search in a list or a range of values.  There are 3 ways of using an `IN` filter: - to search that a field's value is present in a numeric or a date range. - to search that a field's value is present in a list of literals. - to search that a literal value is present in a multivalued field's values.  > Example of an `IN` filter expression on a numeric range:  ```sql numeric_field IN [1..10] -- Filters results such as 1 <= numeric_field <= 10  numeric_field IN ]1..10[ -- Filters results such as 1 < numeric_field < 10 ```  > Example of an `IN` filter expression on a date range:  ```sql date_field IN [date'2017'..date'2018'] -- Filters results such as date_field date is between year 2017 and 2018 ```  > Example of an `IN` filter expression on a list of literals:  ```sql my_field IN (\"Paris\", \"Nantes\", \"Lorient\", \"Besançon\") -- Filters results such as my_field is equal to \"Paris\", \"Nantes\", \"Lorient\" or \"Besançon\" ```  > Example of an `IN` filter expression on a multivalued field:  ```sql \"Paris\" IN multivalued_text_field -- Filters results such as the literal \"Paris\" is present in the multivalued field 15 IN multivalued_int_field -- Same as above but with an integer literal 12.087 IN mutlivalued_decimal_field -- Same as above but with a decimal literal true IN mutlivalued_boolean_field -- Same as above but with a boolean literal ```   ## IS NULL filter  **Syntax:**  - `<field> is null` - `<field> is not null`  **Clauses where it can be used:** `where` only  A null field filter takes a field and restricts results only if the field values are null. The opposite filter, `is not null`, takes a field and restricts results only if the field values are not null.  > Examples of a null filter expression:  ```sql film_name is null      -- matches records where film_name is null  film_name is not null  -- matches records where film_name is not null ```  # ODSQL aggregate functions  Aggregation functions are functions that perform a computation on a set of values and return one value. They are usually used in conjunction with a `group_by` clause.  ## avg()  **Syntax:** `avg(<numeric_field>)`  **Clauses where it can be used:** `select`, `order_by`  **Returned type:** numeric  This function takes a numeric field. It returns the average (`avg`) of this field over a group.  > Example of an `avg` aggregation:  ```sql avg(population) as avg_population -- Return the average of the population ```  ## count()  **Syntax:** `count(<field>|*)`  **Clauses where it can be used:** `select`, `order_by`  **Returned type:** integer  This function computes a number of elements.  It accepts the following parameters:  - a field name: only returns the count for non-`null` values of this field - a `*`: returns the count of all elements  > Examples of a `count` aggregation:  ```sql count(*) -- Return number of elements  count(population) as population_count_not_empty -- Return number of elements where `population` field is not empty ```  ## count(distinct)  **Syntax:** `count(distinct <field>|*)`  **Clauses where it can be used:** `select`, `order_by`  **Returned type:** integer  This function computes the **unique** numbers of elements, eliminating the repetitive appearance of the same data.  It accepts the following parameters:  - a field name: only returns the number of unique non-`null` values of this field. - the function `ifnull(<ods_field>, <alternative_expression>)`: same as above, but replace all `null` values with an alternative expression before counting. See the documentation of the [ifnull function](#section/ODSQL-functions/ifnull()) for more details on its syntax.  **Note:** For performance reasons, the count is always approximated.  > Examples of a `count distinct` aggregation:  ```sql count(distinct species) -- Return the number of unique values for the field species  count(distinct ifnull(species, \"'unknown'\")) -- Same as above, but null values will be counted as equals to 'unknown' ```  ## envelope()  **Syntax:** `envelope(<geo_point_field>)`  **Clauses where it can be used:** `select`  **Returned type:** geo_shape  This function takes a geo_point field. It returns the convex hull (`envelope`) of all the points of the geo_point field.  > Example of an `envelope` aggregation:  ```sql envelope(geo_point) as convex_hull -- Return the convex_hull for the geo_point field ```  ## bbox()  **Syntax:** `bbox(<geo_field>)`  **Clauses where it can be used:** `select`  **Returned type:** geo_shape  This function takes a geo_point or a geo_shape field. It returns the bounding box of all the geometries.  > Example of an `bbox` aggregation:  ```sql bbox(geo_point) -- Return the bounding box of all the points ```  ## max()  **Syntax:** `max(<numeric_field>|<date_field>)`  **Clauses where it can be used:** `select`, `order_by`  **Returned type:** numeric or date  This function takes a numeric or a date field name. It returns the maximum value (`max`) of this field.  > Example of a `max` aggregation:  ```sql max(population) as max_population -- Return max value for population field ```  ## median()  **Syntax:** `median(<numeric_field>)`  **Clauses where it can be used:** `select`, `order_by`  **Returned type:** numeric  This function takes a numeric field name. It returns the median (`median`) of this field's values. Since the median is the 50th percentile, it is a shortcut for `percentile(field, 50)`.  > Example of a `median` aggregation:  ```sql median(age) as med -- Return the median of the age field ```  ## min()  **Syntax:** `max(<numeric_field>|<date_field>)`  **Clauses where it can be used:** `select`, `order_by`  **Returned type:** numeric or date  This function takes a numeric or a date field name. It returns the minimum value (`min`) of this field.  > Example of a `min` aggregation:  ```sql min(population) as min_population -- Return min value for population field ```  ## percentile()  **Syntax:** `percentile(<numeric_field>, <percentile>)`  **Clauses where it can be used:** `select`, `order_by`  **Returned type:** numeric  This function takes a numeric field name and a percentile. It returns the nth percentile (`percentile`) of this field. Percentile must be a decimal value between `0` and `100`.  > Example of a `percentile` aggregation:  ```sql percentile(age, 1) as first_percentile -- Return the first percentile of the age field ```  ## sum()  **Syntax:** `sum(<numeric_field>)`  **Clauses where it can be used:** `select`, `order_by`  **Returned type:** numeric  This function takes a numeric field name as an argument. It returns the sum of all values for a field.  > Example of a `sum` aggregation:  ```sql sum(population) as sum_population -- Return the sum of all values for the population field ```  # ODSQL grouping functions  Grouping functions are functions that can be used in the `group_by` clause to separate a set of records into different sets that share a common property. An [aggregate function](#section/ODSQL-aggregate-functions) can then be applied on each group separately.  ## range() - group by static ranges  **Syntax for numerical ranges:** `range(<field_literal> [, *]?, <numeric_literal> [,<numeric_literal>]* [, *]?)` where `<field_literal>` must be a numeric field  **Syntax for date/datetime ranges:** `range(<field_literal> [, *]?, <date_literal> [,<date_literal>]* [, *]?)` where `<field_literal>` must be a date or datetime field.  **Clauses where it can be used:** `group_by` only  The static range function takes a variable number of parameters:  - a field name, and - a variable number of parameters. Each parameter can be a numerical literal, a date literal or the special syntax `*` to denote infinity.  A `*` as first step makes values lower than the lower bound included in the first group, a `*` as last step makes values greater than the upper bound included in the last group.  Note that the resulting aggregation includes the lower bound and excludes the higher bound.  Ranges can be set on numerical fields and on date/datetime fields.  For a recall, date literals are composed of the `date` identifier followed by a date in ISO format, e.g. `date'2021-02-01'`  > Examples of a group by static ranges expression:  ```sql RANGE(population, *, 10, 50, 100, *)               -- Creates 4 groups: [*, 9], [10, 49], [50, 99] and [100, *] RANGE(population, 20.5, *)                         -- Creates 1 group: [20.5, *[ RANGE(population, 1,2,3)                           -- Creates 2 groups: [1-1], [2, 2] RANGE(date, *, date'2020-11-13', date'2021-01-01') -- Creates 2 groups: [*, 2020-11-13T00:00:00.000Z[ and [2020-11-13T00:00:00.000Z, 2021-01-01T00:00:00.000Z[ ```  ## range() - group by ranges of equal widths  **Syntax for numerical fields:** `group_by=range(<field_literal>, <numeric_literal>)` where `<field_literal>` must be a numeric field  **Syntax for date/datetime fields:** `group_by=range(<field_literal>, <integer><interval_unit>)` where `<field_literal>` must be a date/datetime field, and `<interval_unit>` is one of the following (case sensitive) string constants:  - `ms`, `millisecond` or `milliseconds`, - `s`, `second` or `seconds`, - `m`, `minute` or `minutes`, - `h`, `hour` or `hours`, - `d`, `day` or `days`, - `w`, `week` or `weeks`, - `M`, `month` or `months`, - `q`, `quarter` or `quarters`, - `y`, `year` or `years`.  **Note:** For some interval units (week, month, quarter, and year), an interval value of more than one is not supported yet.  **Clauses where it can be used:** `group_by` only   It is possible to group values of a field by ranges of equal widths, also known as histograms.  Ranges of equal widths are supported for numerical fields and date/datetime fields.  The `range` function for ranges of equal widths takes for parameters:  - a field name, and - the desired width of each group.  For date/datetime fields, the width of each group is expressed by a time interval with a special syntax (see above).  **Note:** groups that do not contain any data are not returned.  > Example of a group by ranges of equal widths expression:  ```sql RANGE(population, 5) ```  > `5` is the desired width of each returned group. > For values of a `population` field that span from 10 to 28, it creates the following groups:  ```markdown - [10, 15[ - [15, 20[ - [20, 25[ - [25, 30[ ```  > Example of a date histogram:  ```sql RANGE(date, 1 day) ```  > Groups created (one for each day):  ```markdown - [2020-01-01T00:00:00.000Z, 2020-01-02T00:00:00.000Z[ - [2020-01-02T00:00:00.000Z, 2020-01-03T00:00:00.000Z[ - [2020-01-04T00:00:00.000Z, 2020-01-05T00:00:00.000Z[ - ... ```  > No group is created for 2020-01-03 since no data is available for this day.  ## geo_cluster()  **Syntax:** `group_by=geo_cluster(<geo_point_field>, <zoom_level>[, <radius>])` where: - `<zoom_level>` is an integer between 0 and 25 - `<radius>` is an optional integer. It defaults to 40.  **Clauses where it can be used:** `group_by` only  This function groups points that are close to each other.  It first groups points by their [geohash](https://en.wikipedia.org/wiki/Geohash) of a certain level. The level (or precision) of the used geohash grid is determined by both the zoom and the radius parameters: - `zoom_level` follows the [\"slippy map\" zoom level hierarchy](https://wiki.openstreetmap.org/wiki/Zoom_levels): at zoom level 0, one tile represents the whole planet and each sub level sub divides the tile into 4 sub tiles. - `radius` is expressed in pixels on a tile of 256x256 pixels at the given `zoom_level` - the geohash precision is the one where radius in meter is smaller than the geohash cell dimension  A second step merges groups that may have points that are very close. This is to circumvent the \"grid\" effect of the first step. e.g. At geohash grid level 1, France is split into 4 geohash cells \"g\", \"u\", \"e\" and \"s\" that cross somewhere north-east from Bordeaux. A dense group of points that lie in a small area around Bordeaux may be split into more than 1 bucket with the first step. This second step is here to join them back.  The join step is done by: - computing the centroid of each group in the first step, in addition to the list of points that lie within, - merging groups that have centroids that are closer than the distance given by the radius parameter  # Versioning  The development of the Explore API V2 continues, new features are added every month and bugs are fixed every week. To ensure that evolutions do not break any application, dashoard or usage, the team guarantees that: - ODSQL is backward compatible, new syntax cannot replace existing one - responses body are stable, new keys can be added but keys cannot be renamed or deleted - urls and endpoints are stable  Some features require to go deeper and to introduce a breaking change. A breaking change is a violation of one or multiple of our warranties listed above (e.g., a different syntax in ODSQL, a modification of the response body structure, etc.). To ensure that it won't break any existing usage, these changes will be part of a new API version.  An API version is composed of: - a stable url, which is `/api/explore/v2.1` for the version ${{api_versi- an exhaustive documentation, available on the [Helphub](https://help.opendatasoft.com/apis/ods-explore-v2/)  When a new version is available, the team will communicate the release notes widely and be available to help on migration. Previous version response contains a header `ODS-Explore-API-Deprecation`.  ## Deprecation warnings  When a feature needs to be changed in a breaking way, the new behaviour is introduced in a new version and the behaviour stays the same for the current version. The API response may contain in this case dedicated HTTP headers that give information about the possible deprecation of a used feature: - `ODS-Explore-API-Deprecation` will contain deprecation messages (separated by `;` if there are multiple messages). A deprecation message has the following formatting: `<FEATURE_ID>: deprecation message`. e.g. `DATE_KEYS_AS_ISOFORMAT: Dates used in group keys are currently returned as timestamps and will be returned as standard formatted date strings in the next API version` - `Link` contains the URL of the version changelog  

    The version of the OpenAPI document: v2.1
    Contact: support@opendatasoft.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from setuptools import setup, find_packages  # noqa: H301

# To install the library, run the following
#
# python setup.py install
#
# prerequisite: setuptools
# http://pypi.python.org/pypi/setuptools
NAME = "Opendatasoft Explore API Client"
VERSION = "21.0.1"
PYTHON_REQUIRES = ">= 3.8"
REQUIRES = [
    "urllib3 >= 2.1.0, < 3.0.0",
    "python-dateutil >= 2.8.2",
    "pydantic >= 2",
    "typing-extensions >= 4.7.1",
]

setup(
    name=NAME,
    version=VERSION,
    description="Opendatasoft&#39;s Explore API Reference Documentation",
    author="OpenAPI Generator community",
    author_email="support@opendatasoft.com",
    url="",
    keywords=["OpenAPI", "OpenAPI-Generator", "Opendatasoft's Explore API Reference Documentation"],
    install_requires=REQUIRES,
    packages=find_packages(exclude=["test", "tests"]),
    include_package_data=True,
    license="Copyright Opendatasoft",
    long_description_content_type='text/markdown',
    long_description="""\
    # Introduction  Welcome to the Opendatasoft Explore API!  The Opendatasoft Explore API v2 is organized around REST. It provides access to all the data available through the platform in a coherent, hierarchical way.  If you want to learn more about how to make the most out of the API, we recommend reading the article [Introduction to API explore](https://userguide.opendatasoft.com/l/fr/article/b3dyxp1acz-une-introduction-l-api-explore). This article will provide you with a comprehensive overview of the API&#39;s capabilities and guide you through the process of accessing and manipulating data.  - Only the HTTP &#x60;GET&#x60; method is supported. - All API endpoints return JSON. - Endpoints are organized in a hierarchical way describing the relative   relationship between objects. - All responses contain a list of links allowing easy and relevant   navigation through the API endpoints. - All endpoints use the Opendatasoft Query Language (ODSQL). This means   that most of the time, parameters work the same way for all endpoints. - While the &#x60;records&#x60; endpoint is subject to a [limited number of returned records](https://help.opendatasoft.com/apis/ods-explore-v2/#tag/Dataset/operation/getRecords), the &#x60;exports&#x60; endpoint has no limitations.  ## Status  The v2.1 version is stable and production ready: no breaking change will be introduced in the future, following our [versioning policy](#section/Versioning).   ## v2.1 Changelog  Following our [versioning policy](#section/Versioning), some changes have been introduced in the 2.1 version of the Explore API. Some of them may not be backward compatible with the previous version:  - the &#x60;group_by&#x60; clause is now available [on export endpoints](#tag/Dataset/operation/exportRecords) - the XLSX export format replaces the old XLS format - full text searches have been reworked:   - the [search()](#section/ODSQL-predicates/search()) function has been changed,   - two new functions are available: [suggest()](#section/ODSQL-predicates/suggest()) and [startswith()](#section/ODSQL-predicates/startswith()) - date functions ([year()](#section/ODSQL-functions/year()), [month()](#section/ODSQL-functions/month()), [day()](#section/ODSQL-functions/day()), [hour()](#section/ODSQL-functions/hour()), [minute()](#section/ODSQL-functions/minute()), [second()](#section/ODSQL-functions/second())) now return integers, instead of strings - [grouping by geo fields](#section/Opendatasoft-Query-Language-(ODSQL)/Group-by-clause) is now deprecated and the &#x60;geo_cluster()&#x60; grouping function should be used instead - in a &#x60;group_by&#x60;, [null values are now grouped](#section/Opendatasoft-Query-Language-(ODSQL)/Language-elements) - [date aggregation keys are formatted as isoformat dates](#section/Opendatasoft-Query-Language-(ODSQL)/Group-by-clause), previously as timestamps - [CSV exports](#tag/Dataset/operation/exportRecordsCSV) output a Byte Marker Order (BOM) character by default - [GPX exports](#tag/Dataset/operation/exportRecordsGPX) use &#x60;&lt;extension&gt;&#x60; instead of &#x60;&lt;desc&gt;&#x60; by default to export attributes - datetimes in GeojSON exports are now output as isoformat strings, they were previously output as integer timestamps - geometry functions have been renamed (old function names are still available):   - &#x60;distance()&#x60; becomes [&#x60;within_distance()&#x60;](#section/ODSQL-predicates/within_distance())   - &#x60;geometry(geom1, geom2, INTERSECTS)&#x60; becomes [&#x60;intersects()&#x60;](#section/ODSQL-predicates/intersects())   - &#x60;geometry(geom1, geom2, DISJOINT)&#x60; becomes [&#x60;disjoint()&#x60;](#section/ODSQL-predicates/disjoint())   - &#x60;geometry(geom1, geom2, WITHIN)&#x60; becomes [&#x60;within()&#x60;](#section/ODSQL-predicates/within())  Regarding endpoints: - &#x60;/api/explore/v2.0/&lt;source&gt;/datasets/&lt;dataset_id&gt;/aggregates&#x60; and &#x60;/api/explore/v2.0/&lt;source&gt;/datasets/&lt;dataset_id&gt;/query&#x60; are not available anymore in v2.1. Their functionalities have been merged into the unique \&quot;records\&quot; endpoint (&#x60;/api/explore/v2.0/&lt;source&gt;/datasets/&lt;dataset_id&gt;/records&#x60;), - The output schemas of the following endpoints have been changed:   - [&#x60;/api/explore/v2.1/&lt;source&gt;/datasets&#x60;](#tag/Catalog/operation/getDatasets)   - [&#x60;/api/explore/v2.1/&lt;source&gt;/datasets/&lt;dataset_id&gt;&#x60;](#tag/Catalog/operation/getDataset)   - [&#x60;/api/explore/v2.1/&lt;source&gt;/datasets/&lt;dataset_id&gt;/records&#x60;](#tag/Dataset/operation/getRecords)   - [&#x60;/api/explore/v2.1/&lt;source&gt;/datasets/&lt;dataset_id&gt;/records/&lt;record_id&gt;&#x60;](#tag/Dataset/operation/getRecord)   ## Base URL  The Explore API is accessed using a base URL that is specific to a domain. In the examples provided in the documentation, we use the domain &lt;http://documentation-resources.opendatasoft.com&gt;.  URL paths start with &#x60;/api/explore/v2.1&#x60;. A path to a resource looks like this: &#x60;https://&lt;domain&gt;/api/explore/v2.1/&lt;resource&gt;&#x60;.  # Getting Started  To try out the Explore API, you&#39;ll get the first two records from a dataset that includes monthly prices for gold.  You&#39;ll get data from a portal providing public access to data. So, you don&#39;t need an account or an API key.  ## Step 1: Find dataset information  For this example, you will use the [GET records endpoint](#operation/getRecords) to list records from a dataset. So, you need the dataset identifier and the name of the field that stores the dates to build your request.  1. Open a browser and go to the desired domain:    &#x60;https://documentation-resources.opendatasoft.com/explore&#x60;.     The &#x60;explore&#x60; page lists all datasets on the domain.  2. Click the desired dataset.  For this example, click \&quot;Gold Prices\&quot;.  3. Open the **Information** tab and check the **dataset identifier**.  In this example, the dataset identifier is &#x60;gold-prices&#x60;.  ## Step 2: Build your ODSQL query  In this example, you just want to retrieve the first set of two dataset records. The records returned by the request are grouped into pages. Pages are limited in size according to the number of records per page as specified by the &#x60;limit&#x60; parameter.  1. To determine how many records to retrieve, start the query with a &#x60;limit&#x60; parameter. Since you only want to retrieve the first two records, use &#x60;2&#x60; as the parameter value. 2. To determine the specific page of data to be returned, use an &#x60;offset&#x60; parameter. Since you only want to retrieve the first set of two records, use &#x60;0&#x60; as the parameter value or keep it unspecified, since &#x60;0&#x60; is the default value. 3. Put all the elements together.  The complete query is &#x60;limit&#x3D;2&amp;offset&#x3D;0&#x60;.  ## Step 3: Build your request  To retrieve data using the Explore API, use the &#x60;GET&#x60; HTTP method.  The path to a resource is made up of the following elements:  - A domain: in this example, query the Explore API on the &#x60;documentation-resources.opendatasoft.com&#x60; domain. - A resource: from the domain&#39;s &#x60;catalog&#x60;, retrieve the &#x60;records&#x60; of the &#x60;gold-prices&#x60; dataset. - A query: use the &#x60;select&#x3D;count(*)&amp;group_by&#x3D;year(date)&#x60; query built in the previous step.  The complete path is &#x60;https://documentation-resources.opendatasoft.com/api/explore/v2.1/catalog/datasets/gold-prices/records?limit&#x3D;2&#x60;  You can access the Explore API using curl or any HTTP client.  To make a query using curl, open a terminal and paste the following command:  &#x60;&#x60;&#x60;shell curl -X GET \&quot;https://documentation-resources.opendatasoft.com/api/explore/v2.1/catalog/datasets/gold-prices/records?limit&#x3D;2\&quot; &#x60;&#x60;&#x60;  The response should look like this:  &#x60;&#x60;&#x60;json {   \&quot;total_count\&quot;: 384,   \&quot;results\&quot;: [     {       \&quot;date\&quot;: \&quot;1988-01\&quot;,       \&quot;price\&quot;: 477.758     },     {       \&quot;date\&quot;: \&quot;1988-03\&quot;,       \&quot;price\&quot;: 443.491     }   ] } &#x60;&#x60;&#x60;  &#x60;total_count&#x60; shows the total number of records returned by the query.  The &#x60;results&#x60; array contains the two records returned by the request.  For example, we can see the first record contains two fields: &#x60;date&#x60; and &#x60;price&#x60;. Given the information from the first record, in January 1988 (&#x60;1988-01&#x60;), the gold price was $477.758 (&#x60;477.758&#x60;).  ## Next steps  Read the [Opendatasoft Query Language (ODSQL)](&lt;#section/Opendatasoft-Query-Language-(ODSQL)&gt;) reference documentation. It will help you build queries, search and filter data from Opendatasoft portals.  # Authentication  An authenticated user can be granted access to restricted datasets and benefit from extended quotas for API calls. The API features an authentication mechanism for users to be granted their specific authorizations.  For the platform to authenticate a user, you need to either:  - be logged in a portal, so a session cookie authenticating your user is   passed along your API calls, or - provide an API key via the Authorization header or as a query parameter.  ## Finding and generating API keys  API keys are managed via your user profile page at &#x60;https://&lt;domain&gt;/account/&#x60; or by clicking on your name in the header.  Go to the tab named My API keys to see your existing API keys, revoke them and create new ones.  **Note:** By default, every API key authenticates requests as coming from your user, which means they grant the same rights (yours) to any person using them. Therefore, you should not share your keys. For advanced usages, API key permissions can be edited using the API key Automation API.  ## Providing API keys within requests  If you try to access a private portal&#39;s catalog without being authenticated, the API returns a &#x60;401 Unauthorized&#x60; error.  After generating an API key, you can use it to make authenticated requests. Depending on the permissions granted to the user for which the API key has been created, the JSON response contains only data about the datasets this user can access on the portal.  It is good practice to pass the API key to the &#x60;Authorization&#x60; header in the following format:  &#x60;Authorization: Apikey &lt;API_KEY&gt;&#x60;  Alternatively, you can pass the API key as a query parameter in the following format:  &#x60;apikey&#x3D;&lt;API_KEY&gt;&#x60;  Replace &#x60;&lt;API_KEY&gt;&#x60;with your API key.  **Note:** We recommend passing the API key via a header over in a query parameter because headers are not stored in your browser history or server logs, minimizing the risk of exposure of your API key.  ## Using OAuth2 authorization  Opendatasoft implements the OAuth2 authorization flow, allowing third-party application makers to access the data hosted on an Opendatasoft platform on behalf of a user while never having to deal with a password, avoiding any user credential being compromised.  The Opendatasoft OAuth2 authorization flow is compliant with RFC 6749 and uses Bearer Tokens in compliance with RFC 6750.  Application developers who want to use the Opendatasoft APIs with OAuth2 must go through the following steps:  1. Register their application with the Opendatasoft platform. 2. Request approval from users via an OAuth2 authorization grant. 3. Request a bearer token that will allow them to query the Opendatasoft    platform APIs for a limited amount of time. 4. Refresh the Bearer Token when it expires.  Currently, applications are registered on a specific domain and can only access data on this domain.  ### Register an application for OAuth2 authentication  1. Go to the My applications tab of your account page on the domain you want    to register the application on. 2. Fill the registration form with the following information:    - Application name: the name of the application    - Type:      - confidential: client password is kept secret from the user and only used from a trusted environment (e.g., a web service, where the client password is stored server-side and never sent to the user)      - public: client password is embedded in a client-side application, making it potentially available to the world (e.g., a mobile or desktop application)    - Redirection URL: the URL users will be redirected to after they have granted you permission to access their data 3. Store the resulting client ID and client secret that will be needed to    perform the next steps.  ### Getting an authorization grant  1. Redirect users to /oauth2/authorize/ with the appropriate query    parameters. 2. The user will then be authenticated in the platform and redirected to a    page identifying your application. 3. From there, the user will review the information you filled in the form    described above and the scope of the requested access and grant your    application the right to access their data. 4. Once the user has accepted those terms, they will be redirected to your    application&#39;s redirection URL with query parameters describing your    authorization grant.  The query parameters you need to supply when redirecting the user are the following:  - &#x60;client_id&#x60;: the client ID you were given during registration - &#x60;redirect_uri&#x60;: the redirect URI you provided during registration - &#x60;response_type&#x60;: this should always be set to code - &#x60;scopes&#x60; (optional): a list of space-separated requested scopes.   Currently, only &#x60;all&#x60; is supported. - &#x60;state&#x60; (optional): a random string of your choice  The state parameter is not mandatory, but providing one is recommended for security reasons to verify the returned value provided in the authorization grant redirect.  &gt; Example of a call to &#x60;/oauth2/authorize/&#x60;:  &#x60;&#x60;&#x60;http GET /oauth2/authorize/? client_id&#x3D;123456789&amp; redirect_uri&#x3D;https://example.com&amp; response_type&#x3D;code&amp; state&#x3D;ilovedata&amp; scope&#x3D;all HTTP/1.1 &#x60;&#x60;&#x60;  The authorization grant redirect will have these values:  - &#x60;code&#x60;: a 30-characters-long authorization code - &#x60;state&#x60;: the state passed in the request described above  The 30-character authorization code must now be converted into a bearer token within 1 hour before expiring.  Here is an example of redirection following a successful authorization:  &#x60;&#x60;&#x60;http HTTP/1.0 302 FOUND  Location: https://example.com?state&#x3D;ilovedata&amp;code&#x3D;gKnAQc2yIfdz2mY25xxgpTY2uyG5Sv  &#x60;&#x60;&#x60;  ### Converting an authorization grant to a bearer token  To receive a bearer token, convert the previously obtained authorization grant via a POST request to &#x60;/oauth2/token/&#x60; with the following parameters:  - &#x60;client_id&#x60;: the client ID you were given during registration - &#x60;client_secret&#x60;: the client secret you were given during registration - &#x60;redirect_uri&#x60;: the redirect URI you provided during registration - &#x60;grant_type&#x60;: this should always be set to &#x60;authorization_code&#x60; - &#x60;code&#x60;: the 30-character authorization code received as an authorization   grant - &#x60;scopes&#x60; _(optional)_: a list of space-separated requested scopes.   Currently, only &#x60;all&#x60; is supported. - &#x60;state&#x60; _(optional)_: a random string of your choice  Example call to &#x60;/oauth2/token/&#x60;:  &#x60;&#x60;&#x60;http POST /oauth2/token/ HTTP/1.1  client_id&#x3D;cid&amp; client_secret&#x3D;csc&amp; grant_type&#x3D;authorization_code&amp; code&#x3D;GokshWxRFXmW0MaLHkDv5HrG6wieGs&amp; scopes&#x3D;all&amp; redirect_uri&#x3D;https://example.com&amp; state&#x3D;ilovedata &#x60;&#x60;&#x60;  Alternative call with an &#x60;Authorization&#x60; header:  &#x60;&#x60;&#x60;http POST /oauth2/token/ HTTP/1.1  Authorization: Basic Y2lkOmNzYw&#x3D;&#x3D;  grant_type&#x3D;authorization_code&amp; code&#x3D;GokshWxRFXmW0MaLHkDv5HrG6wieGs&amp; scopes&#x3D;all&amp; redirect_uri&#x3D;https://example.com&amp;state&#x3D;ilovedata &#x60;&#x60;&#x60;  Alternatively, you can pass your client ID and client secret through the Authorization header  The response to this request is a JSON representation of a bearer token, which contains the following values:  - &#x60;access_token&#x60;: the token you can use to access the user&#39;s data. - &#x60;expires_in&#x60;: the number of seconds before token expiration - &#x60;token_type&#x60;: the type of the token. It will always be &#x60;Bearer&#x60; - &#x60;state&#x60;: the state passed in the request described above - &#x60;scope&#x60;: the list of scopes of this authorization code - &#x60;refresh_token&#x60;: a refresh token that can be used to renew this bearer   token when expired  &gt; Unlike the access token, which can be used any number of times until &gt; expiration, the refresh token doesn&#39;t expire but can only be used once.  Example response for a bearer token request:  &#x60;&#x60;&#x60;http HTTP/1.0 200 OK  Content-Type: application/json &#x60;&#x60;&#x60;  &#x60;&#x60;&#x60;json {   \&quot;access_token\&quot;: \&quot;9kxoTUYvSxnAiMpv008NBqRiqk5xWt\&quot;,   \&quot;expires_in\&quot;: 3600,   \&quot;token_type\&quot;: \&quot;Bearer\&quot;,   \&quot;state\&quot;: \&quot;ilovedata\&quot;,   \&quot;scope\&quot;: \&quot;all\&quot;,   \&quot;refresh_token\&quot;: \&quot;jFfDUcsK9zzNMs1zwczzJxGrimPtmf\&quot; } &#x60;&#x60;&#x60;  ### Using the bearer token  The bearer token can be passed along requests for authentication in three different ways:  - as a query parameter of the request  &#x60;&#x60;&#x60;http GET /api/end/point?access_token&#x3D;9kxoTUYvSxnAiMpv008NBqRiqk5xWt HTTP/1.1 &#x60;&#x60;&#x60;  - in the request&#39;s &#x60;Authorization&#x60; header  &#x60;&#x60;&#x60;http GET /api/end/point HTTP/1.1  Authorization: Bearer 9kxoTUYvSxnAiMpv008NBqRiqk5xWt &#x60;&#x60;&#x60;  - in the request body  &#x60;&#x60;&#x60;http GET /api/end/point HTTP/1.1  access_token&#x3D;9kxoTUYvSxnAiMpv008NBqRiqk5xWt &#x60;&#x60;&#x60;  ### Refreshing a bearer token  To refresh an expired bearer token, send a request to the &#x60;/oauth2/token/&#x60; endpoint, with the following query parameters:  - &#x60;client_id&#x60;: the client ID you were given during registration - &#x60;client_secret&#x60;: the client secret you were given during registration - &#x60;refresh_token&#x60;: the refresh token returned in the bearer token response - &#x60;grant_type&#x60;: this should always be set to &#x60;refresh_token&#x60; - &#x60;scopes&#x60;: a list of space-separated requested scopes. Currently, only   &#x60;all&#x60; is supported. - &#x60;state&#x60; _(optional)_: a random string of your choice  The response to this request is identical to the bearer token response.  Example token refresh call:  &#x60;&#x60;&#x60;http POST /oauth2/token/ HTTP/1.1  client_id&#x3D;cid&amp; client_secret&#x3D;csc&amp; grant_type&#x3D;refresh_token&amp; refresh_token&#x3D;jFfDUcsK9zzNMs1zwczzJxGrimPtmf&amp; scopes&#x3D;all&amp; redirect_uri&#x3D;https://example.com&amp; state&#x3D;ilovedata &#x60;&#x60;&#x60;  # Opendatasoft Query Language (ODSQL)  Filtering features are built in the core of the Opendatasoft API engine.  The Opendatasoft Query Language (ODSQL) makes it possible to express complex queries as a filtering context for datasets or records and build aggregations or computed fields.  A given filtering context can simply be copied from one API to another. For example, it is possible to build a user interface that allows the user to visually select the records they are interested in, using full-text search, facets, and geo-filtering. Then, it allows them to download these records with the same filtering context.  The ODSQL is split into five different kinds of clauses:  - The [&#x60;select&#x60; clause](#section/Opendatasoft-Query-Language-(ODSQL)/Select-clause) allows choosing the returned fields, giving them an   alias, manipulating them with functions like count, sum, min, max, etc. - The [&#x60;where&#x60; clause](#section/Opendatasoft-Query-Language-(ODSQL)/Where-clause) acts as a filter for the returned datasets or records,   thanks to boolean operations, filter functions, arithmetic expressions, etc. - The [&#x60;group by&#x60; clause](#section/Opendatasoft-Query-Language-(ODSQL)/Group-by-clause) allows aggregating rows together based on fields,   numeric ranges, or dates. - The [&#x60;order by&#x60; and &#x60;limit&#x60; clauses](#section/Opendatasoft-Query-Language-(ODSQL)/Order-by-clause) allow choosing the order and quantity   of rows received as a response.  These clauses are used as parameters in the Explore API v2 for searching, aggregating, and exporting datasets and records. Depending on the used endpoint, some features of the query language are available or not in the request.  **Note:** the whole query language is case insensitive, and spaces are optional. In this documentation, the uppercase is used for language keywords, only for clarity purposes.  ## Language elements  ODSQL clauses are composed of basic language elements. These can either be [field names or aliases](#field-names), [literals](#literals-in-odsql-clauses) or [reserved keywords](#reserved-keywords-in-odsql-clauses).  ### Field names  A field name is made of alphanumeric characters and underscores and refers to a field of a dataset or to a dynamically created field that only exists during the query (a.k.a. an alias).  **Note:** if a field name contains only numbers or is a keyword, it must be enclosed in back quotes.  &gt; Examples of a field names:  &#x60;&#x60;&#x60;sql my_field &gt; 10  -- my_field is a field name  &#x60;12&#x60; &gt; 10  -- without back quotes, 12 would be considered a numeric literal  &#x60;and&#x60;: \&quot;value\&quot; -- AND is a keyword, &#x60;and&#x60; represents a field name then &#x60;&#x60;&#x60;  ### Literals in ODSQL clauses  Literals are fixed values of a specific type and can be used in comparison, assignments, or functions.  There are 6 types of literal:  - string - numeric - date - boolean - geometry - null  #### String literal  A string literal is a literal enclosed in either single or double quotes.  &gt; Examples of a string literal:  &#x60;&#x60;&#x60;sql \&quot;Word\&quot;  \&quot;Multiple words\&quot;  &#39;Using single quotes&#39; &#x60;&#x60;&#x60;  **Note:** &#x60;\\&#x60; (backslash) character can be used to escape special characters. For example to escape a single quote: &#x60;&#39;Don\\&#39;t worry&#39;&#x60;.  #### Numeric literal  A numeric literal is either an integer or a decimal value. It is not enclosed in quotes.  &gt; Examples of numeric literals:  &#x60;&#x60;&#x60;sql 100  5.8  my_field &gt; 108.7 &#x60;&#x60;&#x60;  #### Date literal  A date literal is defined with a &#x60;date&#x60; keyword followed by a valid date format enclosed in single quotes.  A valid date can be:  - an [ISO 8601 date](https://en.wikipedia.org/wiki/ISO_8601), or - a slash-separated date in the YYYY/MM/DD (year/month/day) format.  &gt; Examples of a date literal:  &#x60;&#x60;&#x60;sql date&#39;2017-04-03T08:02&#39;  date&#39;2018/04/01&#39; &#x60;&#x60;&#x60;  #### Boolean literal  A boolean literal can either be a &#x60;TRUE&#x60; or a &#x60;FALSE&#x60; keyword (case insensitive). It should be used in boolean filters.  &gt; Example of a boolean literal:  &#x60;&#x60;&#x60;sql my_boolean_field is TRUE  my_boolean_field: FALSE &#x60;&#x60;&#x60;  #### Geometry literal  A geometry literal is defined with a &#x60;geom&#x60; keyword followed by a valid geometry expression enclosed in single quotes.  Supported geometry expressions are:  - [WKT/WKB](https://en.wikipedia.org/wiki/Well-known_text) - [GeoJSON geometry](https://en.wikipedia.org/wiki/GeoJSON)  &gt; Example of a geometry literal:  &#x60;&#x60;&#x60;sql within_distance(my_geo_field, geom&#39;POINT(1 1)&#39;, 10km)  geometry(my_geo_field, geom&#39;{\&quot;type\&quot;: \&quot;Polygon\&quot;,\&quot;coordinates\&quot;:[[[100.0, 0.0],[101.0, 0.0],[101.0, 1.0],[100.0, 1.0],[100.0,0.0]]]}&#39;) &#x60;&#x60;&#x60; #### Null literal  The &#x60;null&#x60; literal (case insensitive) is used to represent the absence of a value.  It is present in the [is null filter](#section/ODSQL-predicates/IS-NULL-filter) to test whether a field has a value or not.  ### Reserved keywords in ODSQL clauses  Reserved keywords can be used inside clauses for building ODSQL expressions.  When used in a clause as a field literal, the reserved keyword must be escaped with back quotes.  List of reserved keywords:  - and - as - asc - avg - by - count - date_format - day - dayofweek - desc - distinct - equi - false - group - hour - ifnull - or - limit - lower - max - millisecond - min - minute - month - not - null - quarter - range - search - second - select - sum - top - true - upper - where - year  For example, &#x60;not&#x60; is a reserved keyword and must be escaped with back quotes if referred to as a field literal:  &#x60;&#x60;&#x60;sql my_field_literal is not true -- my_field_literal is not a reserved keyword, there&#39;s no need to escape it  &#x60;not&#x60; is not true -- not is a reserved keyword and must be escaped &#x60;&#x60;&#x60;  ### Handling null values  A &#x60;null&#x60; value in a dataset is used when the value in a field is unknown or missing. It means that there is no data for a field in a record.  Each clause behaves differently to handle null values:  - When selecting a field in a &#x60;select&#x60; clause, null values are represented as &#x60;null&#x60;. - When filtering with a &#x60;where&#x60; clause, a comparison involving at least one null value is false, meaning that null values are filtered out of the result. - When grouping with a &#x60;group_by&#x60; clause, no group exists for null values in v2.0, a null group do exist starting with v2.1 - When sorting with an &#x60;order_by&#x60; clause, null values come after all other values, regardless of the sorting direction (i.e., ascending or descending).  Default handling of null values can be changed by filtering using the [is null filter](#section/ODSQL-predicates/IS-NULL-filter) or replacing null values by an alternative value or expression using the &#x60;ifnull&#x60; function.   ## Select clause  The select clause can be used in records Explore APIs as the parameter &#x60;select&#x60;.  The select clause allows:  - choosing the fields that will be returned for each row, - transforming fields using arithmetic, - renaming fields, - adding computed virtual fields to fields, and - including or excluding fields based on a pattern.  A select clause is composed of a single select expression or a list of comma-separated expressions.  A select expression can be:  - a field literal, - an include/exclude function, - an arithmetic expression, or - an aggregation function.  Except for the include/exclude function, a select expression can define a label with the keyword &#x60;AS&#x60;. This label will be used in the output of the API as &#x60;key&#x60; for the select expression result.  ### Select field names  A select field name is the simplest form of select expression. It takes a field name that must be returned in the result. It also accepts the special character &#x60;*&#x60; to select all fields (it is the default behavior).  If a select expression is used in conjunction with a &#x60;group by&#x60; clause, the selected field name must be in the &#x60;group by&#x60; clause.  &gt; Examples of a select field literal:  &#x60;&#x60;&#x60;sql *                           -- Select all fields  field1, field2, field3      -- Only select field1, field2, and field3  field1 AS my_field, field2  -- Renaming field1 as my_field and select field2 &#x60;&#x60;&#x60;   ### Select aggregation  Like in the SQL language, a &#x60;select&#x60; can also express an aggregation expression.  The following aggregation functions are available:  - [avg (average)](#section/ODSQL-aggregate-functions/avg()) - [count](#section/ODSQL-aggregate-functions/count()) - [count distinct](#section/ODSQL-aggregate-functions/count(distinct)) - [envelope](#section/ODSQL-aggregate-functions/envelope()) - [max (maximum)](#section/ODSQL-aggregate-functions/max()) - [median](#section/ODSQL-aggregate-functions/median()) - [min (minimum)](#section/ODSQL-aggregate-functions/min()) - [percentile](#section/ODSQL-aggregate-functions/percentile()) - [sum](#section/ODSQL-aggregate-functions/sum())  &gt; Examples of an aggregation expression:  &#x60;&#x60;&#x60;sql SUM(population) as sum_population -- Will compute the sum of all values for the field &#x60;population&#x60; returned as sum_population  COUNT(*) -- Return number of elements &#x60;&#x60;&#x60;  ## Where clause  The where clause can be used in the whole Explore API as the parameter &#x60;where&#x60;.  The where clause allows one to filter rows with a combination of boolean expressions.  A where expression can be:  - a search query - a filter function - a comparison filter - an equality filter  Where expressions can be combined with [boolean operators](#boolean-operators) and grouped via parenthesis.  &gt; Example of a where clause with boolean operators: &#x60;&#x60;&#x60;sql my_numeric_field &gt; 10 and my_text_field like \&quot;paris\&quot; or within_distance(my_geo_field, geom&#39;POINT(1 1)&#39;, 1km) &#x60;&#x60;&#x60; &gt; This where clause filters results where numeric_field &gt; 10 and (my_text_field contains the word &#x60;paris&#x60; or distance between my_geo_field and the point with 1,1 as lat,lon is under 1 kilometer)  **Note**: it is generally possible to use multiple &#x60;where&#x60; clauses on an API endpoint. They are combined with a boolean &#x60;AND&#x60; in that case.  ### Boolean operators  Where expressions can use boolean operators to express boolean filter.  There are 3 different boolean operations:  - &#x60;AND&#x60;: results must match left and right expressions - &#x60;OR&#x60;: results must match left or right expression - &#x60;NOT&#x60;: inverses the next expression  &#x60;AND&#x60; has precedence over the &#x60;OR&#x60; operator. It means that, in the expression &#x60;a or b and c&#x60;, the sub-expression &#x60;b and c&#x60; is interpreted and executed first. It can also be written with parenthesis: &#x60;a or (b and c)&#x60;.  In order to change operator precedence, it is possible to use parenthesis in the expression. To give precedence to the &#x60;OR&#x60; operator, the above expression can be written &#x60;(a or b) and c&#x60;.  &gt; Examples of a boolean operator:  &#x60;&#x60;&#x60;sql my_boolean_field OR my_numeric_field &gt; 50 and my_date_field &gt; date&#39;1972&#39; -- Results can have my_boolean_field to true. They can also have my_numeric_field greater than 50 and my_date_field older than 1972  (my_boolean_field OR my_numeric_field &gt; 50) and my_date_field &gt; date&#39;1972&#39; -- Results must have my_date_field older than 1972. They also must have my_boolean_field to true or my_numeric_field greater than 50 &#x60;&#x60;&#x60;  ### Search query filter  Filter search queries are queries that don’t refer to fields. They only contain quoted strings and boolean operators. Filter search queries perform full-text searches on all visible fields of each record and return matching rows.  If the string contains more than one word, the query will be an &#x60;AND&#x60; query on each tokenized word.  &gt; Examples of a search query:  &#x60;&#x60;&#x60;sql \&quot;tree\&quot;  \&quot;tree\&quot; AND \&quot;flower\&quot;  \&quot;tree\&quot; OR \&quot;car\&quot;  NOT \&quot;dog\&quot;  \&quot;dog\&quot; AND NOT \&quot;cat\&quot; &#x60;&#x60;&#x60;  &gt; Examples of a search query with multiple words:  &#x60;&#x60;&#x60;sql \&quot;film\&quot;           -- returns results that contain film  \&quot;action movies\&quot;  -- returns results that contain action and movies. &#x60;&#x60;&#x60;  ### Filter functions  Filter functions are built-in functions that can be used in a &#x60;where&#x60; clause.  Available filter functions are:  - [&#x60;search&#x60; function](#section/ODSQL-predicates/search()), to perform a full-text search - [&#x60;suggest&#x60; function](#section/ODSQL-predicates/suggest()) - [&#x60;startswith&#x60; function](#section/ODSQL-predicates/startswith()) - [&#x60;in_bbox&#x60; function](#section/ODSQL-predicates/in_bbox()), to filter in a geographical area defined by a bounding box - [&#x60;within_distance&#x60; function](#section/ODSQL-predicates/within_distance()), to filter in a geographical area defined by a circle - [&#x60;intersects&#x60;](#section/ODSQL-predicates/intersects()), [&#x60;disjoint&#x60;](#section/ODSQL-predicates/disjoint()) and [&#x60;within&#x60;](#section/ODSQL-predicates/within()) to filter in a geographical area defined by a geometry  ### Comparison operators  Three types of comparison operators can be used in a &#x60;where&#x60; clause:  - [text comparison operators](#section/ODSQL-predicates/Text-comparison-operators) - [numeric comparison operators](#section/ODSQL-predicates/Numeric-comparison-operators) - [date comparison operators](#section/ODSQL-predicates/Date-comparison-operators)  ## Group by clause  The group by clause can be used in the Explore API as the parameter &#x60;group_by&#x60;.  The group by clause creates groups from data depending on a group by expression. Groups of data cannot be returned directly and aggregation functions in the &#x60;select&#x60; clause have to be used to \&quot;summarize\&quot; and return a value for each group. An operation of \&quot;aggregation\&quot; can then be described by two parts: the &#x60;group_by&#x60; part that make groups of rows of data from a specific criterion and an aggregation function in the &#x60;select&#x60; clause to reduce each group to a row.  A group by clause can contain:  - a single group by expression, or - a list of comma-separated group by expressions.  Like select expressions, a group by expression can have an &#x60;AS&#x60; statement to give it a label.  A group by expression can be:  - empty, - a field, - [static ranges](#section/ODSQL-grouping-functions/range()-group-by-static-ranges), - [ranges of equal widths](#section/ODSQL-grouping-functions/range()-group-by-ranges-of-equal-widths), - the result of a function applied on a field value (e.g. a date function, or a date format)  &gt; Example of a simple group by expression with a label:  &#x60;&#x60;&#x60;sql group_by&#x3D;my_field as myfield &#x60;&#x60;&#x60;  &gt; Example of multiple group by expressions with a label:  &#x60;&#x60;&#x60;sql group_by&#x3D;my_field1,my_field2 as my_field &#x60;&#x60;&#x60;  ### Empty group by  When no &#x60;group_by&#x60; part is expressed, rows of data are implicitly grouped into an sole group and aggregation functions are computed on the whole set of records.  ### Group by field  A group by field expression allows the grouping of specified field values. It creates a group for each different field value.  **Format:** &#x60;group_by&#x3D;&lt;field_literal&gt;&#x60;  &gt; Example of a simple group by field expression  &#x60;&#x60;&#x60;sql group_by&#x3D;my_field &#x60;&#x60;&#x60;  **Note:** - Starting with v2.1, grouping by geopoint or geoshape fields is not supported directly anymore. Please use the [geo_cluster() grouping function](#section/ODSQL-grouping-functions/geo_cluster()) to make groups out of geo points. - Starting with v2.1, grouping by a date field now formats the key of each group as a string representing the ISO formatting of the date, when it was an integer timestamp in v2.0  ## Order by clause  The order by clause can be used to sort rows returned by a query.  The parameter &#x60;order_by&#x60; adds an order by clause to an API query. It accepts a list of comma-separated expressions followed by a direction:  - ASC for ascending - DESC for descending  **Format:** &#x60;order_by &#x3D; expression [ ASC | DESC ], ...&#x60;  An order by expression can be:  - a field - an aggregation function - [a &#x60;random&#x60; function](#section/ODSQL-functions/random())  The direction, if not specified, is ASC (ascending) by default. The random sorting will circumvent the default direction.  **Note:** when ordering by both aggregations and fields, the aggregation order must be at the head of the list. For example, &#x60;order_by &#x3D; avg(age), gender works&#x60;, but &#x60;order_by &#x3D; gender, avg(age)&#x60; returns an error.  &gt; Examples of an order by clause  &#x60;&#x60;&#x60;sql group_by&#x3D;city &amp; order_by&#x3D;city ASC -- Order cities alphabetically  group_by&#x3D;city &amp; order_by&#x3D;count(*) DESC -- Order each city by its number of records  select&#x3D;count(*) as population_count &amp; group_by&#x3D;city  &amp; order_by&#x3D;population_count DESC -- Order each city by its number of records, using a label  group_by&#x3D;city, year(birth_date) as birth_year &amp; order_by&#x3D;city DESC, birth_year ASC -- Order by city and then by year of birth &#x60;&#x60;&#x60;  # ODSQL functions  ## length()  **Syntax:** &#x60;length(&lt;text_literal&gt;|&lt;text_field&gt;)&#x60;  **Returned type:** &#x60;integer&#x60;  **Clauses where it can be used:** &#x60;select&#x60;, &#x60;where&#x60;, &#x60;order_by&#x60;  Returns the string length of its parameter, i.e. the number of characters that composes the string.  ## now()  **Syntax:** &#x60;now(&lt;optional_named_parameters&gt;)&#x60;  **Returned type:** &#x60;datetime&#x60;  **Clauses where it can be used:** &#x60;select&#x60;, &#x60;where&#x60;, &#x60;order_by&#x60;  ### Parameters to the now() function  &gt; Examples, assuming the current date time is 2021-05-06 12:34:55.450500+00:00, which is a Thursday &#x60;&#x60;&#x60;sql now() -- Returns &#39;2021-05-06T12:34:55.450500+00:00&#39; now(year&#x3D;2000) -- Sets the year component to return &#39;2000-05-06T12:34:55.450500+00:00&#39; now(years&#x3D;-1) -- Sets the year to one year ago which is &#39;2020-05-06T12:34:55.450500+00:00&#39; now(year&#x3D;2001, months&#x3D;-1) -- Sets the year to 2001 and subtract 1 month to return &#39;2000-04-06T12:34:55.450500+00:00&#39; now(day&#x3D;31,month&#x3D;2) -- Sets the day to 31, then the month to 2. The actual day part is rounded to 28 &#39;2021-02-28T12:34:55.450500+00:00&#39; now(weekday&#x3D;0) -- Sets the day to the next Monday which is &#39;2021-05-10T12:34:55.450500+00:00&#39; now(mondays&#x3D;+1) -- Sets the day to the next Monday which is also &#39;2021-05-10T12:34:55.450500+00:00&#39; now(mondays&#x3D;-1) -- Sets the day to the previous Monday which is &#39;2021-05-03T12:34:55.450500+00:00&#39; &#x60;&#x60;&#x60;  Without any parameters, the &#x60;now()&#x60; function returns the current date and time.  The function may also be called with named parameters to set or modify certain parts of the current date and time.  With each parameter, an integer value is required, interpreted as an absolute value or as a relative value to a part of the current date and time.  Parameter names in their singular form will set a certain part of the current date and time to the given value. Parameter names written in plural will add or subtract the given value to a part of the current date and time.  If a parameter is used multiple times in the call, only the last one is actually used, the others are ignored.  | Parameter name | Accepted values      | Description                                                                                               | | -------------- | -------------------- | --------------------------------------------------------------------------------------------------------- | | &#x60;year&#x60;         | 1 to 9999            | Year component                                                                                            | | &#x60;years&#x60;        | Any integer          | Value to add to or subtract from the year component                                                       | | &#x60;month&#x60;        | 1 to 12              | Month component                                                                                           | | &#x60;months&#x60;       | Any integer          | Value to add to or subtract from the month component, then the year component in case of overflow         | | &#x60;day&#x60;          | Any positive integer | Day component, rounded to the maximum valid day number for the current month                              | | &#x60;days&#x60;         | Any integer          | Value to add to or subtract from the day component, then the month component in case of overflow          | | &#x60;hour&#x60;         | 0 to 23              | Hour component                                                                                            | | &#x60;hours&#x60;        | Any integer          | Value to add to or subtract from the hour component, then the day component in case of overflow           | | &#x60;minute&#x60;       | 0 to 59              | Minute component                                                                                          | | &#x60;minutes&#x60;      | Any integer          | Value to add to or subtract from the minute component, then the hour component in case of overflow        | | &#x60;second&#x60;       | 0 to 59              | Second component                                                                                          | | &#x60;seconds&#x60;      | Any integer          | Value to add to or subtract from the second component, then the minute component in case of overflow      | | &#x60;microsecond&#x60;  | 0 to 999999          | Microsecond component                                                                                     | | &#x60;microseconds&#x60; | Any integer          | Value to add to or subtract from the microsecond component, then the second component in case of overflow | | &#x60;weekday&#x60;      | 0 to 6               | Day of the week, 0 for monday to 6 for sunday                                                             | | &#x60;mondays&#x60;      | Any integer          | Number of Mondays to add to or subtract from the current date                                             | | &#x60;tuesdays&#x60;     | Any integer          | Number of Tuesdays to add to or subtract from the current date                                            | | &#x60;wednesdays&#x60;   | Any integer          | Number of Wednesdays to add to or subtract from the current date                                          | | &#x60;thursdays&#x60;    | Any integer          | Number of Thursdays to add to or subtract from the current date                                           | | &#x60;fridays&#x60;      | Any integer          | Number of Fridays to add to or subtract from the current date                                             | | &#x60;saturdays&#x60;    | Any integer          | Number of Saturdays to add to or subtract from the current date                                           | | &#x60;sundays&#x60;      | Any integer          | Number of Sundays to add to or subtract from the current date                                             |  ## year()  **Syntax:** &#x60;year(&lt;date_literal&gt;|&lt;date_field&gt;|&lt;datetime_literal&gt;|&lt;datetime_field&gt;)&#x60;  **Returned type:** &#x60;integer&#x60;  **Clauses where it can be used:** &#x60;select&#x60;, &#x60;where&#x60;, &#x60;order_by&#x60;, &#x60;group_by&#x60;  Returns the year number of a date or datetime as a string.  ## month()  **Syntax:** &#x60;month(&lt;date_literal&gt;|&lt;date_field&gt;|&lt;datetime_literal&gt;|&lt;datetime_field&gt;)&#x60;  **Returned type:** &#x60;integer&#x60;  **Clauses where it can be used:** &#x60;select&#x60;, &#x60;where&#x60;, &#x60;order_by&#x60;, &#x60;group_by&#x60;  Returns the month number (between 1 and 12) of a date or datetime as a string.  ## day()  **Syntax:** &#x60;day(&lt;date_literal&gt;|&lt;date_field&gt;|&lt;datetime_literal&gt;|&lt;datetime_field&gt;)&#x60;  **Returned type:** &#x60;integer&#x60;  **Clauses where it can be used:** &#x60;select&#x60;, &#x60;where&#x60;, &#x60;order_by&#x60;, &#x60;group_by&#x60;  Returns the day number of the month (between 1 and 31) of a date or datetime as a string.  ## hour()  **Syntax:** &#x60;hour(&lt;date_literal&gt;|&lt;date_field&gt;|&lt;datetime_literal&gt;|&lt;datetime_field&gt;)&#x60;  **Returned type:** &#x60;integer&#x60;  **Clauses where it can be used:** &#x60;select&#x60;, &#x60;where&#x60;, &#x60;order_by&#x60;, &#x60;group_by&#x60;  Returns the hour number (between 0 and 23) of a date or datetime as a string.  ## minute()  **Syntax:** &#x60;minute(&lt;date_literal&gt;|&lt;date_field&gt;|&lt;datetime_literal&gt;|&lt;datetime_field&gt;)&#x60;  **Returned type:** &#x60;integer&#x60;  **Clauses where it can be used:** &#x60;select&#x60;, &#x60;where&#x60;, &#x60;order_by&#x60;, &#x60;group_by&#x60;  Returns the minute number (between 0 and 59) of a date or datetime as a string.  ## second()  **Syntax:** &#x60;second(&lt;date_literal&gt;|&lt;date_field&gt;|&lt;datetime_literal&gt;|&lt;datetime_field&gt;)&#x60;  **Returned type:** &#x60;integer&#x60;  **Clauses where it can be used:** &#x60;select&#x60;, &#x60;where&#x60;, &#x60;order_by&#x60;, &#x60;group_by&#x60;  Returns the second number (between 0 and 59) of a date or datetime as a string.  ## date_format()  **Syntax:** &#x60;date_format(&lt;date&gt;, &lt;date_format&gt;)&#x60;  **Arguments:**  - &#x60;&lt;date&gt;&#x60;: a date field, - &#x60;&lt;date_format&gt;&#x60;: a string describing how to format the date (see below)  **Returned type:** &#x60;string&#x60;.  **Clauses where it can be used:** &#x60;select&#x60;, &#x60;where&#x60;, &#x60;order_by&#x60;, &#x60;group_by&#x60;   &#x60;&lt;date_format&gt;&#x60; is a string, where each character or group of characters will be replaced by parts of the date in the returned string.  The following formats are available for a date format expression:  | Symbol       | Description                                            | Examples | | ------------ | ------------------------------------------------------ | -------- | | yy or YY     | year on two digits                                     | 20       | | yyyy or YYYY | year on four digits                                    | 2020     | | xx           | weekyear\\* on two digits                               | 96       | | xxxx         | weekyear\\* on four digits                              | 1996     | | w            | week of weekyear                                       | 7        | | ww           | week of weekyear, left-padded with 0                   | 07       | | e            | day of week, as a number, 1 for Monday to 7 for Sunday | 2        | | E            | day of week, abbreviated name                          | sun.     | | EEEE         | day of week, full name                                 | Sunday   | | D            | day of year                                            | 89       | | DDD          | day of year, left-padded with 0                        | 089      | | M            | month of year                                          | 7        | | MM           | month of year, left-padded with 0                      | 07       | | MMMM        | month of year, full name                               | July     | | d            | day of month                                           | 8        | | dd           | day of month, left-padded with 0                       | 08       | | H            | hour of day, 0-23                                      | 9        | | HH           | hour of day, 00-23, left-padded with 0                 | 09       | | m            | minute of hour, 0-59                                   | 13       | | mm           | minute of hour, 00-59, left-padded with 0              | 09       | | s            | second of minute, 0-59                                 | 13       | | ss           | second of minute, 00-59, left-padded with 0            | 09       |  \\*Years and week years differ slightly. For more information, see the [definition](https://en.wikipedia.org/wiki/ISO_week_date) of week years.  The date format can contain free text that won&#39;t be interpreted. The free text must be surrounded by single quotes &#39;.  To insert a single quote in the final string, it must be doubled.  Some special characters can also be used as delimiters between date components: &#x60;?&#x60;, &#x60;,&#x60;, &#x60;.&#x60;, &#x60;:&#x60;, &#x60;/&#x60; and &#x60;-&#x60;.  &gt; Examples of a &#x60;date_format&#x60; function, where &#x60;date_field&#x60; &#x3D; &#39;2007-11-20T01:23:45&#39;:  &#x60;&#x60;&#x60;sql date_format(date_field, &#39;dd/MM/YYYY&#39;) -- Returns &#39;20/11/2007&#39;  date_format(date_field, \&quot;&#39;The date is &#39;dd/MM/YYYY\&quot;) -- Returns &#39;The date is 20/11/2007&#39;  date_format(date_field, \&quot;&#39;The date is &#39;_&#39;_&#39;dd/MM/YYYY&#39;&#39;\&quot;) -- Returns \&quot;The date is &#39;20/11/2007&#39;\&quot;  date_format(date_field, &#39;E&#39;) -- Returns &#39;mar.&#39;  date_format(date_field, &#39;EEEE&#39;) -- Returns &#39;mardi&#39;  date_format(date_field, &#39;H&#39;) -- Returns &#39;1&#39;  date_format(date_field, &#39;HH&#39;) -- Returns &#39;01&#39;  date_format(date_field, &#39;yy&#39;) -- Returns &#39;07&#39;  date_format(date_field, &#39;yyyy&#39;) -- Returns &#39;2007&#39;  date_format(date_field, &#39;M&#39;) -- Returns &#39;11&#39;  date_format(date_field, &#39;MM&#39;) -- Returns &#39;11&#39; &#x60;&#x60;&#x60;  When used in the &#x60;where&#x60; clause, &#x60;date_format&#x60; must be compared to string values.  &gt; Example of a &#x60;date_format&#x60; function used in a &#x60;where&#x60; clause:  &#x60;&#x60;&#x60;sql where&#x3D;date_format(date_field, &#39;dd&#39;) &#x3D; &#39;08&#39; &#x60;&#x60;&#x60;  You can use the &#x60;lang&#x60; parameter to force the output language.  ## json_format()  **Syntax:** &#x60;json_format(&lt;text_field&gt;,[&lt;fallback&gt;[&lt;null&gt;|&lt;text_literal&gt;]])&#x60;  **Returned type:** &#x60;text&#x60; or &#x60;json&#x60;  **Clause where it can be used:** &#x60;select&#x60;  **Description:**  Formats the text field into JSON if possible. If the text can be transformed into valid JSON, it returns the formatted JSON string. If the text cannot be transformed into valid JSON, it returns either the fallback value if provided or the original string.  - &#x60;&lt;text_field&gt;&#x60; (mandatory): A text field to be formatted into JSON. It cannot be multivalued.  - &#x60;&lt;fallback&gt;&#x60; (optional): A fallback string to return if the text cannot be transformed into valid JSON. If omitted, the original string is returned in case of invalid JSON.  **Note**: On &#x60;/exports&#x60;, except with the JSON export format, this function returns the original text value.  &gt; Example of a &#x60;json_format&#x60; function used in a &#x60;select&#x60; clause:  &#x60;&#x60;&#x60;sql select&#x3D;json_format(text_field)  select&#x3D;json_format(text_field, &#39;bad json&#39;)  select&#x3D;json_format(text_field, null) &#x60;&#x60;&#x60;  ## ifnull()  **Syntax:** &#x60;ifnull(&lt;expression&gt;, &lt;alternative_expression&gt;)&#x60;  **Arguments:**  - &#x60;&lt;expression&gt;&#x60;: a field or an expression - &#x60;&lt;alternative_expression&gt;&#x60;: an alternative field, expression or literal  **Clauses where it can be used:** &#x60;select&#x60;, &#x60;where&#x60;, &#x60;order_by&#x60;, &#x60;group_by&#x60;  **Returned type:** the type of &#x60;&lt;expression&gt;&#x60; when not null  **Returned value:** the result of &#x60;&lt;alternative_expression&gt;&#x60; if &#x60;&lt;expression&gt;&#x60; returns a null value. The result of &#x60;&lt;expression&gt;&#x60; otherwise.  The returned type of &#x60;&lt;expression&gt;&#x60; and &#x60;&lt;alternative_expression&gt;&#x60; should be the same.  For &#x60;group_by&#x60; clause, expressions are restricted to fields and literals.  &gt; Examples of &#x60;ifnull&#x60; function, where &#x60;int_field&#x60; contains some null values:  &#x60;&#x60;&#x60;sql ifnull(int_field, 0) -- value of int_field is 0 for each row that contains a null value &#x60;&#x60;&#x60;  ## lower()  **Syntax:** &#x60;lower(&lt;text_literal&gt;|&lt;text_field&gt;)&#x60;  **Returned type:** &#x60;string&#x60;  **Clauses where it can be used:** &#x60;select&#x60;, &#x60;where&#x60;, &#x60;order_by&#x60; and &#x60;group_by&#x60;  Returns a string in lowercase.  &gt; Some examples: &#x60;&#x60;&#x60;sql lower(&#39;JAZZ&#39;) -- returns &#39;jazz&#39;  lower(text_field) -- returns the lowercase representation of the field &#x60;&#x60;&#x60;  ## include() and exclude()  **Syntax:** &#x60;include(&lt;field_name_pattern&gt;)&#x60;  **Syntax:** &#x60;exclude(&lt;field_name_pattern&gt;)&#x60;  **Clauses where it can be used:** &#x60;select&#x60; only  Include and exclude are functions that accept fields names.  Fields listed in an include function are present in the result, whereas fields listed in an exclude function are absent from the result.  Fields can contain a wildcard suffix (the &#x60;*&#x60; character). In that case, the inclusion/exclusion works on all field names beginning with the value preceding the wildcard.  **Note**: &#x60;include()&#x60; and &#x60;exclude()&#x60; are pseudo functions: they do not return a value, but are used as a declaration to constrain the list of returned fields.  &gt; Examples of an include/exclude:  &#x60;&#x60;&#x60;sql include(pop) -- will only include fields which name is pop  exclude(pop) -- will exclude fields which name is pop  include(pop*) -- Will include fields beginning with pop &#x60;&#x60;&#x60;  ## Arithmetic operators  An arithmetic expression accepts simple arithmetic operations. It accepts field names, numeric constants or text values, and scalar functions. More complex arithmetic expressions can be formed by connecting these elements with arithmetic operators:  - &#x60;+&#x60;: add - &#x60;-&#x60;: subtract - &#x60;*&#x60;: multiply - &#x60;/&#x60;: divide  **Note:** A division by zero returns a null value.  Arithmetic operators are only defined on numeric values.  &gt; Examples of arithmetic expressions:  &#x60;&#x60;&#x60;sql 2 * population -- the value of the field &#x60;population&#x60; doubled  \&quot;hello\&quot; -- the constant string \&quot;hello\&quot;  length(country_name) -- the string length of the field &#x60;country_name&#x60; &#x60;&#x60;&#x60;  ## random()  **Syntax:** &#x60;random ( &lt;integer&gt; )&#x60;  **Clauses where it can be used:** &#x60;order_by&#x60; only  The &#x60;&lt;integer&gt;&#x60; is the seed of the random function. When using the random function with one same seed, it will return the same random order each time.  &gt; Examples of an order by random  &#x60;&#x60;&#x60;sql group_by&#x3D;city &amp; order_by&#x3D;random(1) -- Order cities randomly  group_by&#x3D;city &amp; order_by&#x3D;random(1) -- Order cities randomly in the exact same order as the first example  group_by&#x3D;city &amp; order_by&#x3D;random(2) -- Order cities randomly in a different order than the first example &#x60;&#x60;&#x60;  ## distance()  **Syntax:** &#x60;distance(&lt;geo_field&gt;, &lt;center_geometry&gt;)&#x60;  **Clauses where it can be used:** &#x60;select&#x60;, &#x60;order_by&#x60;  **Returned type:** numeric  &gt; Examples of a &#x60;distance&#x60; function:  &#x60;&#x60;&#x60;sql distance(field_name, GEOM&#39;&lt;geometry&gt;&#39;) &#x60;&#x60;&#x60;  The &#x60;distance&#x60; function computes arc distance between geo_point field and a point geometry as reference. Distance (in m) can be returned using &#x60;select&#x60; and/or used to sort records.  # ODSQL predicates  Predicates are functions that return a boolean value (&#x60;true&#x60; or &#x60;false&#x60;). They can be used to filter results in the &#x60;where&#x60; clause.  ## search()  **Syntax:** &#x60;search(&lt;text_field&gt;|*, &lt;text_literal&gt;)&#x60; where: - first parameters are the set of fields on which the search is done:   - &#x60;*&#x60; or empty to search on all visible fields   - a subset of field names separated with a comma &#x60;,&#x60; - the string to search for as last parameter  **Clauses where it can be used:** &#x60;where&#x60; only  **Returned type:** boolean  The &#x60;search()&#x60; function performs a full-text query on all selected fields of each record and return matching records.  It is a fuzzy search and a prefix search: &#x60;&lt;test_literal&gt;&#x60; is first split into terms separated by a space, the first terms are searched for with a certain level of fuziness (see below), and the last term is a prefix search. The level of fuziness for each term depends on the length of the term: - for terms with a length &gt; 5, it matches strings with a [Levenshtein distance](https://en.wikipedia.org/wiki/Levenshtein_distance) of 2, - for terms with a length &gt; 2, it matches strings with a [Levenshtein distance](https://en.wikipedia.org/wiki/Levenshtein_distance) of 1  The matching is **case insensitive**.  &gt; Examples of a &#x60;search&#x60; function:  &#x60;&#x60;&#x60;sql search(title, \&quot;bok of secret\&quot;)  -- will match \&quot;THE BOOK OF SECRETS\&quot; &#x60;&#x60;&#x60;   ## suggest()  **Syntax:** &#x60;suggest(&lt;text_field&gt;|*, &lt;text_literal&gt;)&#x60; where: - first parameters are the set of fields on which the search is done:   - &#x60;*&#x60; or empty to search on all visible fields   - a subset of field names separated with a comma &#x60;,&#x60; - the string to search for as last parameter  **Clauses where it can be used:** &#x60;where&#x60; only  **Returned type:** boolean  &gt; Examples of a &#x60;suggest&#x60; function:  &#x60;&#x60;&#x60;sql suggest(*, \&quot;film\&quot;)  -- returns results that contain film, films, filmography, etc. in at least one visible field suggest(\&quot;film\&quot;)  -- equivalent to the above query search(title, \&quot;secret\&quot;)  -- will match \&quot;THE BOOK OF SECRETS\&quot;  suggest(text_field, other_text_field, \&quot;film\&quot;)  -- same search but in text_field or other_text_field suggest(text_field, \&quot;film\&quot;) OR suggest(other_text_field, \&quot;film\&quot;) -- equivalent to the above query  suggest(text_field, \&quot;film\&quot;) AND suggest(other_text_field, \&quot;film\&quot;) -- returns results that contain film, films, filmography, etc. in both fields &#x60;&#x60;&#x60;  The &#x60;suggest()&#x60; function performs a full-text query on all selected fields of each record and return matching records. It is a prefix search: it matches the text fields that contain terms **beginning with** the searched string.  The matching is **case insensitive**.  **Note:** this function may miss some results that match the prefix when it is used with small prefixes.   ## startswith()  **Syntax:** &#x60;startswith(&lt;text_field&gt;|*, &lt;text_literal&gt;)&#x60; where: - first parameters are the set of fields on which the search is done:   - &#x60;*&#x60; or empty to search on all visible fields   - a subset of field names separated with a comma &#x60;,&#x60; - the string to search for as last parameter  **Clauses where it can be used:** &#x60;where&#x60; only  **Returned type:** boolean  &gt; Examples of a &#x60;startswith&#x60; function:  &#x60;&#x60;&#x60;sql startswith(id, \&quot;ID4536\&quot;)  -- will match id that start with \&quot;ID4536\&quot; startswith(title, \&quot;SECRET\&quot;)  -- will match \&quot;SECRET DEFENSE\&quot; but not \&quot;THE BOOK OF SECRETS\&quot;, nor \&quot;book of secret\&quot; &#x60;&#x60;&#x60;  The &#x60;startswith()&#x60; function performs a text query on all selected fields of each record and return matching records. It is a prefix search: it matches the text fields that contain **strings** **beginning with** the searched string. Contrary to the &#x60;suggest()&#x60; function, the comparison is made on the whole string, without splitting it by spaces and forming **terms** before.  The matching is **case sensitive**.   ## within_distance()  **Syntax:** &#x60;within_distance(&lt;geo_field&gt;, &lt;center_geometry&gt;, &lt;distance&gt;&lt;unit&gt;)&#x60;  **Clauses where it can be used:** &#x60;where&#x60; only  **Returned type:** boolean  &gt; Examples of a &#x60;within_distance&#x60; function:  &#x60;&#x60;&#x60;sql within_distance(field_name, GEOM&#39;&lt;geometry&gt;&#39;, 1km)  within_distance(field_name, GEOM&#39;&lt;geometry&gt;&#39;, 100yd) &#x60;&#x60;&#x60;  The &#x60;within_distance&#x60; function limits the result set to a geographical area defined by a circle. This circle must be defined by its center and a distance.  - The center of the circle is expressed as a [geometry literal](#section/Opendatasoft-Query-Language-(ODSQL)/Language-elements). - The distance is numeric and can have a unit in:    - miles (mi)   - yards (yd)   - feet (ft)   - meters (m)   - centimeters (cm)   - kilometers (km)   - millimeters (mm)  ## in_bbox()  **Syntax:** &#x60;in_bbox(&lt;geo_field&gt;, lat1, lon1, lat2, lon2)&#x60;  **Clauses where it can be used:** &#x60;where&#x60; only  **Returned type:** boolean  This function limits the results to records that have their &#x60;&lt;geo_field&gt;&#x60; contained in a given bounding box. The bounding box is expressed by giving its two extreme points: (lat1, lon1) for the latitude and longitude of the first point and (lat2, lon2) for the latitude and longitude of the second point.  ## intersects()  **Syntax:** &#x60;intersects(&lt;geo_field&gt;, &lt;geometry_literal&gt;)&#x60;  **Clauses where it can be used:** &#x60;where&#x60; only  **Returned type:** boolean  &gt; Examples of a &#x60;geometry&#x60; function:  &#x60;&#x60;&#x60;sql intersects(geo_shape, geom&#39;POLYGON((2.331161 48.869762, 2.3600006 48.87574, 2.373046875 48.85101, 2.3503875 48.84209, 2.3376846 48.85451, 2.3311614 48.869762))&#39;) &#x60;&#x60;&#x60;  The &#x60;intersects&#x60; function limits the result set to a geographical area that intersects a given geometry.  This function must be defined with a [geometry literal](#section/Opendatasoft-Query-Language-(ODSQL)/Language-elements).  ## disjoint()  **Syntax:** &#x60;disjoint(&lt;geo_field&gt;, &lt;geometry_literal&gt;)&#x60;  **Clauses where it can be used:** &#x60;where&#x60; only  **Returned type:** boolean  &gt; Examples of a &#x60;geometry&#x60; function:  &#x60;&#x60;&#x60;sql disjoint(geo_shape, geom&#39;POLYGON((2.331161 48.869762, 2.3600006 48.87574, 2.373046875 48.85101, 2.3503875 48.84209, 2.3376846 48.85451, 2.3311614 48.869762))&#39;) &#x60;&#x60;&#x60;  The &#x60;disjoint&#x60; function limits the result set to a geographical area that is disjoint from a given geometry.  This function must be defined with a [geometry literal](#section/Opendatasoft-Query-Language-(ODSQL)/Language-elements).  ## within()  **Syntax:** &#x60;within(&lt;geo_field&gt;, &lt;geometry_literal&gt;)&#x60;  **Clauses where it can be used:** &#x60;where&#x60; only  **Returned type:** boolean  &gt; Examples of a &#x60;within&#x60; function:  &#x60;&#x60;&#x60;sql within(geo_shape, geom&#39;POLYGON((2.331161 48.869762, 2.3600006 48.87574, 2.373046875 48.85101, 2.3503875 48.84209, 2.3376846 48.85451, 2.3311614 48.869762))&#39;) &#x60;&#x60;&#x60;  The &#x60;within&#x60; function limits the result set to a geographical area that lie within a given geometry.  This function must be defined with a [geometry literal](#section/Opendatasoft-Query-Language-(ODSQL)/Language-elements).   ## Text comparison operators  **Clauses where it can be used:** &#x60;where&#x60; only  | &lt;div style&#x3D;\&quot;width:110px\&quot;&gt;Operator&lt;/div&gt; | Description                                                                      | | --------------------------------------- | -------------------------------------------------------------------------------- | | &#x60;&#x3D;&#x60;                                     | Perform an exact query (not tokenized and not normalized) on the specified field |  ## Numeric comparison operators  **Clauses where it can be used:** &#x60;where&#x60; only  | &lt;div style&#x3D;\&quot;width:110px\&quot;&gt;Operator&lt;/div&gt; | Description                                                                                                 | | --------------------------------------- | ----------------------------------------------------------------------------------------------------------- | | &#x60;&#x3D;&#x60;                                     | Match a numeric value                                                                                       | | &#x60;&gt;&#x60;,&#x60;&lt;&#x60;,&#x60;&gt;&#x3D;&#x60;,&#x60;&lt;&#x3D;&#x60;                       | Return results whose field values are larger, smaller, larger or equal, smaller or equal to the given value |  ## Date comparison operators  **Clauses where it can be used:** &#x60;where&#x60; only  | &lt;div style&#x3D;\&quot;width:110px\&quot;&gt;Operator&lt;/div&gt; | Description                                                         | | --------------------------------------- | ------------------------------------------------------------------- | | &#x60;&#x3D;&#x60;                                     | Match a date                                                        | | &#x60;&gt;&#x60;,&#x60;&lt;&#x60;,&#x60;&gt;&#x3D;&#x60;,&#x60;&lt;&#x3D;&#x60;                       | Return results whose field date are after or before the given value |  ## Boolean field filter  **Syntax:**  - &#x60;&lt;boolean_field&gt;&#x60; - &#x60;&lt;boolean_field&gt; is (true|false)&#x60;  **Clauses where it can be used:** &#x60;where&#x60; only  A boolean field filter takes a boolean field and restricts results only if the boolean value is &#x60;true&#x60;.  There are 2 ways of creating a filter expression:  - with a field literal only: in that case, it filters the result where the field literal value is &#x60;true&#x60; - with a field literal followed by the &#x60;is&#x60; keyword, then &#x60;true&#x60; or &#x60;false&#x60; keywords  &gt; Examples of a boolean field filter:  &#x60;&#x60;&#x60;sql my_boolean_field          -- Filters results where boolean_field is true  my_boolean_field is false -- Filters results where boolean_field is false &#x60;&#x60;&#x60;  where &#x60;&lt;field_literal&gt;&#x60; must be a valid boolean field  ## IN filter  **Syntax:**  - on a numeric range: &#x60;&lt;field_literal&gt; IN (]|[)&lt;numeric_literal&gt; (TO|..) &lt;numeric_literal&gt;(]|[)&#x60; - on a date range: &#x60;&lt;field_literal&gt; IN (]|[)&lt;date_literal&gt; (TO|..) &lt;date_literal&gt;(]|[)&#x60; - on a list: &#x60;&lt;field_literal&gt; IN (&lt;literal&gt;, &lt;literal&gt;*)&#x60; - on a multivalued field: &#x60;&lt;literal&gt; IN &lt;field_literal&gt;&#x60;  **Clauses where it can be used:** &#x60;where&#x60; only  An &#x60;IN&#x60; filter restricts results using a search in a list or a range of values.  There are 3 ways of using an &#x60;IN&#x60; filter: - to search that a field&#39;s value is present in a numeric or a date range. - to search that a field&#39;s value is present in a list of literals. - to search that a literal value is present in a multivalued field&#39;s values.  &gt; Example of an &#x60;IN&#x60; filter expression on a numeric range:  &#x60;&#x60;&#x60;sql numeric_field IN [1..10] -- Filters results such as 1 &lt;&#x3D; numeric_field &lt;&#x3D; 10  numeric_field IN ]1..10[ -- Filters results such as 1 &lt; numeric_field &lt; 10 &#x60;&#x60;&#x60;  &gt; Example of an &#x60;IN&#x60; filter expression on a date range:  &#x60;&#x60;&#x60;sql date_field IN [date&#39;2017&#39;..date&#39;2018&#39;] -- Filters results such as date_field date is between year 2017 and 2018 &#x60;&#x60;&#x60;  &gt; Example of an &#x60;IN&#x60; filter expression on a list of literals:  &#x60;&#x60;&#x60;sql my_field IN (\&quot;Paris\&quot;, \&quot;Nantes\&quot;, \&quot;Lorient\&quot;, \&quot;Besançon\&quot;) -- Filters results such as my_field is equal to \&quot;Paris\&quot;, \&quot;Nantes\&quot;, \&quot;Lorient\&quot; or \&quot;Besançon\&quot; &#x60;&#x60;&#x60;  &gt; Example of an &#x60;IN&#x60; filter expression on a multivalued field:  &#x60;&#x60;&#x60;sql \&quot;Paris\&quot; IN multivalued_text_field -- Filters results such as the literal \&quot;Paris\&quot; is present in the multivalued field 15 IN multivalued_int_field -- Same as above but with an integer literal 12.087 IN mutlivalued_decimal_field -- Same as above but with a decimal literal true IN mutlivalued_boolean_field -- Same as above but with a boolean literal &#x60;&#x60;&#x60;   ## IS NULL filter  **Syntax:**  - &#x60;&lt;field&gt; is null&#x60; - &#x60;&lt;field&gt; is not null&#x60;  **Clauses where it can be used:** &#x60;where&#x60; only  A null field filter takes a field and restricts results only if the field values are null. The opposite filter, &#x60;is not null&#x60;, takes a field and restricts results only if the field values are not null.  &gt; Examples of a null filter expression:  &#x60;&#x60;&#x60;sql film_name is null      -- matches records where film_name is null  film_name is not null  -- matches records where film_name is not null &#x60;&#x60;&#x60;  # ODSQL aggregate functions  Aggregation functions are functions that perform a computation on a set of values and return one value. They are usually used in conjunction with a &#x60;group_by&#x60; clause.  ## avg()  **Syntax:** &#x60;avg(&lt;numeric_field&gt;)&#x60;  **Clauses where it can be used:** &#x60;select&#x60;, &#x60;order_by&#x60;  **Returned type:** numeric  This function takes a numeric field. It returns the average (&#x60;avg&#x60;) of this field over a group.  &gt; Example of an &#x60;avg&#x60; aggregation:  &#x60;&#x60;&#x60;sql avg(population) as avg_population -- Return the average of the population &#x60;&#x60;&#x60;  ## count()  **Syntax:** &#x60;count(&lt;field&gt;|*)&#x60;  **Clauses where it can be used:** &#x60;select&#x60;, &#x60;order_by&#x60;  **Returned type:** integer  This function computes a number of elements.  It accepts the following parameters:  - a field name: only returns the count for non-&#x60;null&#x60; values of this field - a &#x60;*&#x60;: returns the count of all elements  &gt; Examples of a &#x60;count&#x60; aggregation:  &#x60;&#x60;&#x60;sql count(*) -- Return number of elements  count(population) as population_count_not_empty -- Return number of elements where &#x60;population&#x60; field is not empty &#x60;&#x60;&#x60;  ## count(distinct)  **Syntax:** &#x60;count(distinct &lt;field&gt;|*)&#x60;  **Clauses where it can be used:** &#x60;select&#x60;, &#x60;order_by&#x60;  **Returned type:** integer  This function computes the **unique** numbers of elements, eliminating the repetitive appearance of the same data.  It accepts the following parameters:  - a field name: only returns the number of unique non-&#x60;null&#x60; values of this field. - the function &#x60;ifnull(&lt;ods_field&gt;, &lt;alternative_expression&gt;)&#x60;: same as above, but replace all &#x60;null&#x60; values with an alternative expression before counting. See the documentation of the [ifnull function](#section/ODSQL-functions/ifnull()) for more details on its syntax.  **Note:** For performance reasons, the count is always approximated.  &gt; Examples of a &#x60;count distinct&#x60; aggregation:  &#x60;&#x60;&#x60;sql count(distinct species) -- Return the number of unique values for the field species  count(distinct ifnull(species, \&quot;&#39;unknown&#39;\&quot;)) -- Same as above, but null values will be counted as equals to &#39;unknown&#39; &#x60;&#x60;&#x60;  ## envelope()  **Syntax:** &#x60;envelope(&lt;geo_point_field&gt;)&#x60;  **Clauses where it can be used:** &#x60;select&#x60;  **Returned type:** geo_shape  This function takes a geo_point field. It returns the convex hull (&#x60;envelope&#x60;) of all the points of the geo_point field.  &gt; Example of an &#x60;envelope&#x60; aggregation:  &#x60;&#x60;&#x60;sql envelope(geo_point) as convex_hull -- Return the convex_hull for the geo_point field &#x60;&#x60;&#x60;  ## bbox()  **Syntax:** &#x60;bbox(&lt;geo_field&gt;)&#x60;  **Clauses where it can be used:** &#x60;select&#x60;  **Returned type:** geo_shape  This function takes a geo_point or a geo_shape field. It returns the bounding box of all the geometries.  &gt; Example of an &#x60;bbox&#x60; aggregation:  &#x60;&#x60;&#x60;sql bbox(geo_point) -- Return the bounding box of all the points &#x60;&#x60;&#x60;  ## max()  **Syntax:** &#x60;max(&lt;numeric_field&gt;|&lt;date_field&gt;)&#x60;  **Clauses where it can be used:** &#x60;select&#x60;, &#x60;order_by&#x60;  **Returned type:** numeric or date  This function takes a numeric or a date field name. It returns the maximum value (&#x60;max&#x60;) of this field.  &gt; Example of a &#x60;max&#x60; aggregation:  &#x60;&#x60;&#x60;sql max(population) as max_population -- Return max value for population field &#x60;&#x60;&#x60;  ## median()  **Syntax:** &#x60;median(&lt;numeric_field&gt;)&#x60;  **Clauses where it can be used:** &#x60;select&#x60;, &#x60;order_by&#x60;  **Returned type:** numeric  This function takes a numeric field name. It returns the median (&#x60;median&#x60;) of this field&#39;s values. Since the median is the 50th percentile, it is a shortcut for &#x60;percentile(field, 50)&#x60;.  &gt; Example of a &#x60;median&#x60; aggregation:  &#x60;&#x60;&#x60;sql median(age) as med -- Return the median of the age field &#x60;&#x60;&#x60;  ## min()  **Syntax:** &#x60;max(&lt;numeric_field&gt;|&lt;date_field&gt;)&#x60;  **Clauses where it can be used:** &#x60;select&#x60;, &#x60;order_by&#x60;  **Returned type:** numeric or date  This function takes a numeric or a date field name. It returns the minimum value (&#x60;min&#x60;) of this field.  &gt; Example of a &#x60;min&#x60; aggregation:  &#x60;&#x60;&#x60;sql min(population) as min_population -- Return min value for population field &#x60;&#x60;&#x60;  ## percentile()  **Syntax:** &#x60;percentile(&lt;numeric_field&gt;, &lt;percentile&gt;)&#x60;  **Clauses where it can be used:** &#x60;select&#x60;, &#x60;order_by&#x60;  **Returned type:** numeric  This function takes a numeric field name and a percentile. It returns the nth percentile (&#x60;percentile&#x60;) of this field. Percentile must be a decimal value between &#x60;0&#x60; and &#x60;100&#x60;.  &gt; Example of a &#x60;percentile&#x60; aggregation:  &#x60;&#x60;&#x60;sql percentile(age, 1) as first_percentile -- Return the first percentile of the age field &#x60;&#x60;&#x60;  ## sum()  **Syntax:** &#x60;sum(&lt;numeric_field&gt;)&#x60;  **Clauses where it can be used:** &#x60;select&#x60;, &#x60;order_by&#x60;  **Returned type:** numeric  This function takes a numeric field name as an argument. It returns the sum of all values for a field.  &gt; Example of a &#x60;sum&#x60; aggregation:  &#x60;&#x60;&#x60;sql sum(population) as sum_population -- Return the sum of all values for the population field &#x60;&#x60;&#x60;  # ODSQL grouping functions  Grouping functions are functions that can be used in the &#x60;group_by&#x60; clause to separate a set of records into different sets that share a common property. An [aggregate function](#section/ODSQL-aggregate-functions) can then be applied on each group separately.  ## range() - group by static ranges  **Syntax for numerical ranges:** &#x60;range(&lt;field_literal&gt; [, *]?, &lt;numeric_literal&gt; [,&lt;numeric_literal&gt;]* [, *]?)&#x60; where &#x60;&lt;field_literal&gt;&#x60; must be a numeric field  **Syntax for date/datetime ranges:** &#x60;range(&lt;field_literal&gt; [, *]?, &lt;date_literal&gt; [,&lt;date_literal&gt;]* [, *]?)&#x60; where &#x60;&lt;field_literal&gt;&#x60; must be a date or datetime field.  **Clauses where it can be used:** &#x60;group_by&#x60; only  The static range function takes a variable number of parameters:  - a field name, and - a variable number of parameters. Each parameter can be a numerical literal, a date literal or the special syntax &#x60;*&#x60; to denote infinity.  A &#x60;*&#x60; as first step makes values lower than the lower bound included in the first group, a &#x60;*&#x60; as last step makes values greater than the upper bound included in the last group.  Note that the resulting aggregation includes the lower bound and excludes the higher bound.  Ranges can be set on numerical fields and on date/datetime fields.  For a recall, date literals are composed of the &#x60;date&#x60; identifier followed by a date in ISO format, e.g. &#x60;date&#39;2021-02-01&#39;&#x60;  &gt; Examples of a group by static ranges expression:  &#x60;&#x60;&#x60;sql RANGE(population, *, 10, 50, 100, *)               -- Creates 4 groups: [*, 9], [10, 49], [50, 99] and [100, *] RANGE(population, 20.5, *)                         -- Creates 1 group: [20.5, *[ RANGE(population, 1,2,3)                           -- Creates 2 groups: [1-1], [2, 2] RANGE(date, *, date&#39;2020-11-13&#39;, date&#39;2021-01-01&#39;) -- Creates 2 groups: [*, 2020-11-13T00:00:00.000Z[ and [2020-11-13T00:00:00.000Z, 2021-01-01T00:00:00.000Z[ &#x60;&#x60;&#x60;  ## range() - group by ranges of equal widths  **Syntax for numerical fields:** &#x60;group_by&#x3D;range(&lt;field_literal&gt;, &lt;numeric_literal&gt;)&#x60; where &#x60;&lt;field_literal&gt;&#x60; must be a numeric field  **Syntax for date/datetime fields:** &#x60;group_by&#x3D;range(&lt;field_literal&gt;, &lt;integer&gt;&lt;interval_unit&gt;)&#x60; where &#x60;&lt;field_literal&gt;&#x60; must be a date/datetime field, and &#x60;&lt;interval_unit&gt;&#x60; is one of the following (case sensitive) string constants:  - &#x60;ms&#x60;, &#x60;millisecond&#x60; or &#x60;milliseconds&#x60;, - &#x60;s&#x60;, &#x60;second&#x60; or &#x60;seconds&#x60;, - &#x60;m&#x60;, &#x60;minute&#x60; or &#x60;minutes&#x60;, - &#x60;h&#x60;, &#x60;hour&#x60; or &#x60;hours&#x60;, - &#x60;d&#x60;, &#x60;day&#x60; or &#x60;days&#x60;, - &#x60;w&#x60;, &#x60;week&#x60; or &#x60;weeks&#x60;, - &#x60;M&#x60;, &#x60;month&#x60; or &#x60;months&#x60;, - &#x60;q&#x60;, &#x60;quarter&#x60; or &#x60;quarters&#x60;, - &#x60;y&#x60;, &#x60;year&#x60; or &#x60;years&#x60;.  **Note:** For some interval units (week, month, quarter, and year), an interval value of more than one is not supported yet.  **Clauses where it can be used:** &#x60;group_by&#x60; only   It is possible to group values of a field by ranges of equal widths, also known as histograms.  Ranges of equal widths are supported for numerical fields and date/datetime fields.  The &#x60;range&#x60; function for ranges of equal widths takes for parameters:  - a field name, and - the desired width of each group.  For date/datetime fields, the width of each group is expressed by a time interval with a special syntax (see above).  **Note:** groups that do not contain any data are not returned.  &gt; Example of a group by ranges of equal widths expression:  &#x60;&#x60;&#x60;sql RANGE(population, 5) &#x60;&#x60;&#x60;  &gt; &#x60;5&#x60; is the desired width of each returned group. &gt; For values of a &#x60;population&#x60; field that span from 10 to 28, it creates the following groups:  &#x60;&#x60;&#x60;markdown - [10, 15[ - [15, 20[ - [20, 25[ - [25, 30[ &#x60;&#x60;&#x60;  &gt; Example of a date histogram:  &#x60;&#x60;&#x60;sql RANGE(date, 1 day) &#x60;&#x60;&#x60;  &gt; Groups created (one for each day):  &#x60;&#x60;&#x60;markdown - [2020-01-01T00:00:00.000Z, 2020-01-02T00:00:00.000Z[ - [2020-01-02T00:00:00.000Z, 2020-01-03T00:00:00.000Z[ - [2020-01-04T00:00:00.000Z, 2020-01-05T00:00:00.000Z[ - ... &#x60;&#x60;&#x60;  &gt; No group is created for 2020-01-03 since no data is available for this day.  ## geo_cluster()  **Syntax:** &#x60;group_by&#x3D;geo_cluster(&lt;geo_point_field&gt;, &lt;zoom_level&gt;[, &lt;radius&gt;])&#x60; where: - &#x60;&lt;zoom_level&gt;&#x60; is an integer between 0 and 25 - &#x60;&lt;radius&gt;&#x60; is an optional integer. It defaults to 40.  **Clauses where it can be used:** &#x60;group_by&#x60; only  This function groups points that are close to each other.  It first groups points by their [geohash](https://en.wikipedia.org/wiki/Geohash) of a certain level. The level (or precision) of the used geohash grid is determined by both the zoom and the radius parameters: - &#x60;zoom_level&#x60; follows the [\&quot;slippy map\&quot; zoom level hierarchy](https://wiki.openstreetmap.org/wiki/Zoom_levels): at zoom level 0, one tile represents the whole planet and each sub level sub divides the tile into 4 sub tiles. - &#x60;radius&#x60; is expressed in pixels on a tile of 256x256 pixels at the given &#x60;zoom_level&#x60; - the geohash precision is the one where radius in meter is smaller than the geohash cell dimension  A second step merges groups that may have points that are very close. This is to circumvent the \&quot;grid\&quot; effect of the first step. e.g. At geohash grid level 1, France is split into 4 geohash cells \&quot;g\&quot;, \&quot;u\&quot;, \&quot;e\&quot; and \&quot;s\&quot; that cross somewhere north-east from Bordeaux. A dense group of points that lie in a small area around Bordeaux may be split into more than 1 bucket with the first step. This second step is here to join them back.  The join step is done by: - computing the centroid of each group in the first step, in addition to the list of points that lie within, - merging groups that have centroids that are closer than the distance given by the radius parameter  # Versioning  The development of the Explore API V2 continues, new features are added every month and bugs are fixed every week. To ensure that evolutions do not break any application, dashoard or usage, the team guarantees that: - ODSQL is backward compatible, new syntax cannot replace existing one - responses body are stable, new keys can be added but keys cannot be renamed or deleted - urls and endpoints are stable  Some features require to go deeper and to introduce a breaking change. A breaking change is a violation of one or multiple of our warranties listed above (e.g., a different syntax in ODSQL, a modification of the response body structure, etc.). To ensure that it won&#39;t break any existing usage, these changes will be part of a new API version.  An API version is composed of: - a stable url, which is &#x60;/api/explore/v2.1&#x60; for the version ${{api_versi- an exhaustive documentation, available on the [Helphub](https://help.opendatasoft.com/apis/ods-explore-v2/)  When a new version is available, the team will communicate the release notes widely and be available to help on migration. Previous version response contains a header &#x60;ODS-Explore-API-Deprecation&#x60;.  ## Deprecation warnings  When a feature needs to be changed in a breaking way, the new behaviour is introduced in a new version and the behaviour stays the same for the current version. The API response may contain in this case dedicated HTTP headers that give information about the possible deprecation of a used feature: - &#x60;ODS-Explore-API-Deprecation&#x60; will contain deprecation messages (separated by &#x60;;&#x60; if there are multiple messages). A deprecation message has the following formatting: &#x60;&lt;FEATURE_ID&gt;: deprecation message&#x60;. e.g. &#x60;DATE_KEYS_AS_ISOFORMAT: Dates used in group keys are currently returned as timestamps and will be returned as standard formatted date strings in the next API version&#x60; - &#x60;Link&#x60; contains the URL of the version changelog  
    """,  # noqa: E501
    package_data={"opendatasoft_explore": ["py.typed"]},
)