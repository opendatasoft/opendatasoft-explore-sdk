# coding: utf-8

"""
    Explore API

    The Opendatasoft Explore API v2 is organized around REST. It provides access to all the data available through the platform in a coherent, hierarchical way.  - Only the HTTP `GET` method is supported. - All API endpoints return JSON. - Endpoints are organized in a hierarchical way describing the relative relationship between objects. - All responses contain a list of links allowing easy and relevant navigation through the API endpoints. - All endpoints use the [Opendatasoft Query Language (ODSQL)](https://help.opendatasoft.com/apis/ods-explore-v2/#section/Opendatasoft-Query-Language-(ODSQL)). This means that, most of the time, parameters work the same way for all endpoints. - While the `records` endpoint is subject to a [limited number of returned records](https://help.opendatasoft.com/apis/ods-explore-v2/#tag/Dataset/operation/getRecords), the `exports` endpoint has no limitations.

    The version of the OpenAPI document: v2.1
    Contact: support@opendatasoft.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from opendatasoft_explore_async.models.dataset import Dataset

class TestDataset(unittest.TestCase):
    """Dataset unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> Dataset:
        """Test Dataset
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `Dataset`
        """
        model = Dataset()
        if include_optional:
            return Dataset(
                links = [
                    opendatasoft_explore_async.models.links.links(
                        href = '', 
                        rel = 'self', )
                    ],
                dataset_id = '',
                dataset_uid = '',
                attachments = [
                    opendatasoft_explore_async.models.dataset_attachments_inner.dataset_attachments_inner(
                        mimetype = '', 
                        url = '', 
                        id = '', 
                        title = '', )
                    ],
                has_records = True,
                data_visible = True,
                features = [
                    ''
                    ],
                metas = None,
                fields = [
                    opendatasoft_explore_async.models.dataset_fields_inner.dataset_fields_inner(
                        name = '', 
                        label = '', 
                        type = '', 
                        annotations = opendatasoft_explore_async.models.annotations.annotations(), 
                        description = '', )
                    ]
            )
        else:
            return Dataset(
        )
        """

    def testDataset(self):
        """Test Dataset"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()
